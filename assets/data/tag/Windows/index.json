{"hash":"8103612fff5ef0c89ce79e17d3acf7f030a00018","data":{"tag":{"title":"Windows","belongsTo":{"edges":[{"node":{"title":"Windows平台下的少数派新写稿流程","path":"/2020/06/02/writting-for-sspai-on-windows/","date":"2. June 2020","timeToRead":1,"description":"谈及写作，不少的用户都是使用 Mac 平台配合多样的 App 完成从写稿到发布的一条龙服务","content":"<p>谈及写作，不少的用户都是使用 Mac 平台配合多样的 App 完成从写稿到发布的一条龙服务。但是在 Windows 平台上，往往需要很多手动的过程。比如，在少数派平台上，官方提供了专用的接口给 MWeb App 完成从写稿、插图、发布的完善服务，但是 MWeb App 仅在 Mac 平台上提供，Windows 用户常常因为插图图床问题困扰。</p>\n<p>最近，随着两大写作好伴侣 App 的更新，这一情况得以改善。PicGo 迎来了 v2.0 版本的大更新，剥离了核心功能同时支持 CLI 调用和 API 调用。Typora 集成了 PicGo 并提供一键上传图片服务。如果需要更详细的资料，请看这两篇文章：</p>\n<p><a href=\"https://sspai.com/post/52527\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">图床「神器」PicGo v2.0更新，插件系统终于来了</a></p>\n<p><a href=\"https://sspai.com/post/59128\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora 支持自定义图片上传服务了</a></p>\n<p>配合上述两大神器，是否有方法能够改善少数派平台上的写作流程，下面我就来谈谈我的方案。</p>\n<h2 id=\"typora-之功能增强\"><a href=\"#typora-%E4%B9%8B%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Typora 之功能增强</h2>\n<p>首先，从 Typora 官网上能够下载 Win / Linux / OSX 对应平台的安装文件并正确安装。</p>\n<p>然后，我们需要启用图片上传功能。点击 File -> Preferences -> Image，在 Image Upload Setting 那栏，选择 PicGo-Core (command line) ，然后点击 Download and Upgrade，即可完成安装。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/628cb7601505f1aaf9d736a4f59f68a6.png\" alt=\"enhance\"></p>\n<h2 id=\"picgo-之少数派插件\"><a href=\"#picgo-%E4%B9%8B%E5%B0%91%E6%95%B0%E6%B4%BE%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PicGo 之少数派插件</h2>\n<p>得益于 PicGo 的插件系统，我们可以为少数派平台编写插件，快捷完成图片上传到少数派的服务器。那么，如何安装少数派插件？</p>\n<p>步骤一</p>\n<p>首先我们打开 PicGo 配置文件所在的目录，你可以点击上图的 Open Config File 按钮，或者手动打开对应平台的文件夹。</p>\n<p>Windows 平台位于<code class=\"language-text\">C:\\Users\\&lt;your username&gt;\\.picgo\\</code></p>\n<p>Linux 和 OSX 平台位于`~/.picgo/<code class=\"language-text\"></code></p>\n<p>然后，克隆或下载<a href=\"https://github.com/Wsine/picgo-plugin-sspai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/Wsine/picgo-plugin-sspai</a>仓库到该文件夹中，注意如果从网页端下载，解压后去除多余的分支名，这很重要。</p>\n<p>步骤二</p>\n<p>在 PicGo 配置文件夹下创建<code class=\"language-text\">node_modules</code>文件夹，并在里面创建同名快捷方式/软链接，指向刚才下载的仓库文件夹。</p>\n<p>步骤三</p>\n<p>编辑`package.json<code class=\"language-text\"></code>文件，修改里面的依赖项。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"picgo-plugin-sspai\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"file:picgo-plugin-sspai\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>步骤四</p>\n<p>创建`package-lock.json<code class=\"language-text\"></code>，内容填充如下：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"picgo-plugins\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"requires\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lockfileVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"picgo-plugin-sspai\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"file:picgo-plugin-sspai\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>验证</p>\n<p>最终配置文件夹中的目录结构如应如下图所示</p>\n<pre class=\"language-text\"><code class=\"language-text\">~/.picgo &gt; tree\n.\n├── config.json\n├── node_modules\n│   └── picgo-plugin-sspai &lt;soft link&gt;\n├── package.json\n├── package-lock.json\n├── picgo.log\n└── picgo-plugin-sspai\n    ├── index.js\n    ├── License\n    ├── md5.min.js\n    ├── package.json\n    └── README.md</code></pre>\n<h2 id=\"配置个人信息\"><a href=\"#%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>配置个人信息</h2>\n<p>打开少数派官网，登陆自己的账号，然后按F12打开开发者模式，找到 Console 选项卡，输入</p>\n<p>`document.cookie.split('; sspai_cross_token=').pop().split(';').shift()<code class=\"language-text\"></code></p>\n<p>该命令会返回一串字符串，记住该字符串，并重新在 Typora 中打开 PicGo 的配置文件，替换下面样例的 token 占位符，保存</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"picBed\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"current\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sspai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"uploader\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sspai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"transformer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sspai\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"cross_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;replace here>\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"picgoPlugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"picgo-plugin-sspai\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>好了，至此为止，你已完成了全部的配置，那么来看看效果如何吧。</p>\n<h2 id=\"样例效果\"><a href=\"#%E6%A0%B7%E4%BE%8B%E6%95%88%E6%9E%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>样例效果</h2>\n<p>我们就以本文作为目标图片展示一下该写作流程的优化吧，通过菜单栏的 Format -> Image -> Upload All Local Images 能够一键上传该文章下面的全部图片，也可以通过右击图片的方式单张图片上传</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/4472f6471191c61072d1e54de3f941d9.gif\" alt=\"example\"></p>\n<p>最后，打开少数派网站的编辑器，复制全文富文本格式进去，即可完成发布流程。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>该插件的开发仅仅是为了方便用户在少数派平台上写作而创作。图床，一直是流量消耗的大户，目前少数派的图床仅能在 sspai.com 域名下显示，也即启用的防盗链技术，如有别的用途的用户就不用折腾啦。</p>\n<p>等后续的 Typora 更新了发布功能，我会再来优化该流程。那么，希望这个插件能帮得到大家。</p>\n"}},{"node":{"title":"Microsoft Terminal 颜值在线的终端模拟器","path":"/2019/12/09/beautiful-microsoft-terminal/","date":"9. December 2019","timeToRead":1,"description":"最后一块拼图，Microsoft Terminal能够很好地用于日常工作中了","content":"<p>在 Microsoft Build 2019 的大会上，微软给我们带来了一款全新设计的终端模拟器 Microsoft Terminal. 虽然过度好看的宣传片和实际的效果有着巨大的落差，但是也不影响它在 Windows 阵营里取得最高的颜值称号。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/1746B559BC9685F1E4D9BFFF9F5F9EAC.png\" alt=\"terminal\"></p>\n<p>从 Preview v0.2 版本开始我就试用了这款工具，到今天的 Preview v0.6 版本最后关键的问题修复后我才想说来跟大家分享一下这个工具。</p>\n<h2 id=\"安装-terminal\"><a href=\"#%E5%AE%89%E8%A3%85-terminal\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装 Terminal</h2>\n<p>Microsoft Terminal （下称 Terminal） 明确要求了系统版本至少需要 “Windows 10 version 18362” 或以上才能使用。</p>\n<p>而现在的安装方法也很简单，从 Microsoft Store 里面搜索 “Microsoft Terminal” 就可以直接安装和卸载了。</p>\n<p>但是到目前为止，Terminal 还是处于一个 Preview 的阶段，功能上来说不会囊括所有的用户的期望，如果想要有自己期望的功能，可以在官方的开源仓库的 <a href=\"https://github.com/microsoft/terminal/issues\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github issue</a> 上发 Feature Request 哟~</p>\n<h2 id=\"全新配置管理方式\"><a href=\"#%E5%85%A8%E6%96%B0%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>全新配置管理方式</h2>\n<p>Terminal 采用了 JSON 文件作为它的配置文件，这就意味着你可以将整个配置文件备份，然后在别的地方下载下来快速使用，十分的方便。</p>\n<p>实际使我眼前一亮的点是，当我用 Sublime 修改该配置文件保存的时候，已经打开了的 Terminal 的样式能实时发生改变，这大大提高了用户调整配置的便捷程度，而很多工具要做到这点都是将设置界面做成软件的一部分才能实现的，这点给 Terminal 大大的加分。</p>\n<p>由于是 JSON 纯文本配置文件，总是有可能出现手抖或者配置出错的问题，这时候保存配置文件会被提示文件哪里的配置有问题，而该次的保存不会生效，实际调试样式还是十分方便的。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/52104FB432B5BCF495FA7E7C056DBA6C.gif\" alt=\"vim\"></p>\n<h2 id=\"less-is-more-的配置项\"><a href=\"#less-is-more-%E7%9A%84%E9%85%8D%E7%BD%AE%E9%A1%B9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Less is More 的配置项</h2>\n<p>Terminal 提供的配置项不多，但我觉得 98% 的人也只需要修改到这些配置项就足够了，下面来跟大家陈列一下它提供的配置项吧（我只挑重点的来展示）：</p>\n<ul>\n<li>defaultProfile：默认启动的方案，可以为 CMD，PowerShell，Azure 等</li>\n<li>keybindings：快捷键映射</li>\n<li>acrylic：透明度</li>\n<li>background：背景颜色或者背景图片 <del>动漫女神</del></li>\n<li>colorScheme：配色方案，可以自定义配色</li>\n<li>commandline：默认启动的程序，一般为 cmd.exe 等</li>\n<li>cursorColor：光标颜色</li>\n<li>cursorShape：光标形状</li>\n<li>fontFace：字体方案</li>\n<li>fontSize：字体大小</li>\n<li>icon：该方案的代表图标</li>\n<li>name：该方案的名称</li>\n<li>padding：外边距</li>\n<li>historySize：保留的历史输出大小</li>\n</ul>\n<p>一般情况下，当你调整好了显示的字体和大小，调整背景和透明度，还有配色方案，基本上就把一个终端模拟器的外观给定义好了。</p>\n<p>由于是 JSON 配置文件，文件里面也不能像以前的方式一样给出选项，微软将一份配置文件说明放在了仓库中 => <a href=\"https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Settings Schema</a> . 但是却没有在配置文件里面提供链接，我觉得这点还是需要改进的。</p>\n<h2 id=\"功能的最后一块拼图\"><a href=\"#%E5%8A%9F%E8%83%BD%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E6%8B%BC%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>功能的最后一块拼图</h2>\n<p>谈及终端模拟器，一般情况下我会从一些特定的功能去考察它是否功能完备，以及它的加分点有哪些</p>\n<h3 id=\"gpu加速\"><a href=\"#gpu%E5%8A%A0%E9%80%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GPU加速</h3>\n<p>这个就属于新时代的终端模拟器的代表功能了，之前在 Manjaro 下面使用 Alacritty 终端模拟器时才体会到在GPU加速的这一功能。在大量的文本打印的时候，得益于GPU的加速，丝毫没有那种播放PPT的卡顿感，这个对于长时间在终端下工作的我来说还是十分舒服的。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/CC87571D29A2461C0502CF5A3C9268A9.gif\" alt=\"vim\"></p>\n<h3 id=\"多标签\"><a href=\"#%E5%A4%9A%E6%A0%87%E7%AD%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>多标签</h3>\n<p>诚然，很多的终端模拟器都自带了多标签，比如 xshell，mobaxterm 和 cmder 等。前两者在工作用途上是收费的，后者总是占用了太多的 Linux 快捷键。之前我不得不使用 CMD 代替它们（发现意外的好用），现在 Terminal 来将 CMD 缺失的多标签功能给补齐了。</p>\n<h3 id=\"emoji支持\"><a href=\"#emoji%E6%94%AF%E6%8C%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Emoji支持</h3>\n<p>虽然微软平台的Emoji真的很丑，但是有总比没有好不是嘛，我还是很喜欢在Git commit里面加点emoji让它好看一点的。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/E56D8ABFB6EA3F8AF3782EC3B0DBFF0B.png\" alt=\"vim\"></p>\n<h3 id=\"ncurses的支持\"><a href=\"#ncurses%E7%9A%84%E6%94%AF%E6%8C%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NCURSES的支持</h3>\n<p>对于重度使用终端的人来说，基本上离不开两个重要的工具，文本编辑器（Vim / Emacs）和终端复用器（Tmux / Screen）。而它们的底层，其实都是由 ncurses 来提供支持的。这个库可以让你的终端除了不断打印出新的东西，还能后退擦除一些东西，从而造成屏幕不断刷新的效果。</p>\n<p>通过我两周以来的实际体验，在我的日常使用中完全没有问题，因此才会想推荐给大家。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/63A4C2739333EFDD11711E7F9D791BA8.png\" alt=\"vim\"></p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/C85D32FC99D632208A9B029AAD6E2FB3.png\" alt=\"tmux\"></p>\n<h3 id=\"复制与粘贴\"><a href=\"#%E5%A4%8D%E5%88%B6%E4%B8%8E%E7%B2%98%E8%B4%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>复制与粘贴</h3>\n<p>这个就是我指的最后的一块拼图。在 v0.6 版本之前，Terminal 的复制粘贴功能一直有很大的问题。在 Github issue 中搜索 “copy / paste” 等关键字就可以知道。开发团队为了兼容微软长期以来的 Ctrl + C 的复制快捷键做了大量的工作。</p>\n<p>v0.6 版本以前，复制多段文字的时候，在别的地方粘贴总是会出现超长的一行，比如<code class=\"language-text\">a\\nb</code>可能会被粘贴成<code class=\"language-text\">a \\space*555 b</code>的情况，十分影响正常的工作，可惜我已经展示不了了。之前总是需要借助 tmux + http 才能绕过这个问题。现在这个恼人的问题终于被修复了，也就是说可以被大家广泛使用了。</p>\n<h3 id=\"基础的功能\"><a href=\"#%E5%9F%BA%E7%A1%80%E7%9A%84%E5%8A%9F%E8%83%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>基础的功能</h3>\n<p>Terminal 本身还支持 xterm-256 color ，UTF-8 和 unicode 编码，这些我认为都是必要的功能，这里就不细说了。</p>\n<h2 id=\"我的使用分享\"><a href=\"#%E6%88%91%E7%9A%84%E4%BD%BF%E7%94%A8%E5%88%86%E4%BA%AB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>我的使用分享</h2>\n<p>我最近使用的是微软为开发者打造的一款字体 Cascadia，开源仓库在这里 => <a href=\"https://github.com/microsoft/cascadia-code/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cascadia Code</a> . 我很喜欢它，得益于对 unicode 编码的支持，在GPU加速的情况下，它总能给我很多很好看的小惊喜，比如<code class=\"language-text\">=&gt;</code>会被渲染成一个完整的箭头，并且跟随进度条移动。更多的就等你们使用发掘啦。</p>\n<p>我用的是里面默认的 \"One Half Dark\" 配色，我觉得很好看，搭配 70% 的透明度和 5 pixel 的外边距，整体效果很不错。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/8480A1CD36C62A350D33E5F09904EDAC.png\" alt=\"configuration\"></p>\n<p>最后放上我的配置图，剩下的就大家去尝试一下吧~</p>\n"}},{"node":{"title":"Chrome在Windows找回熟悉的Alt + Num切换标签页","path":"/2019/11/24/alt-num-switch-tab-in-chrome-on-windows/","date":"24. November 2019","timeToRead":1,"description":"使用Alt+Num在Chrome浏览器中切换标签页，统一多平台的体验","content":"<p>在不同的系统和软件中，我都喜欢尽可能用同一套快捷键方案去完成相同的功能，以减少自己的学习和记忆成本，最大化效率。但是，哪怕是同一个应用，由于不同平台的默认快捷键不一样，频繁切换平台的迁移学习也很辛苦。</p>\n<p>比如 Chrome 浏览器中，切换标签页的方式在不同的平台上不一样：</p>\n<ul>\n<li>Windows：Ctrl + Num</li>\n<li>Linux：Alt + Num</li>\n<li>Mac：Cmd + Num</li>\n</ul>\n<p>后两者由于键位所处的位置大致相同，所以哪怕没有记忆也不会造成多大的割裂感。但是，Windows 下面的这套快捷键实在是太难受了，本文就是教你如何找回熟悉的感觉。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/FF5B74693EE093B3A0810E93810F336D.png\" alt=\"FF5B74693EE093B3A0810E93810F336D\"></p>\n<p>这里我们需要借助的软件是 Vimium，相信已经有不少文章介绍过它了。在这里我们需要用到它 Custom key mappings 的功能。Vimium 本身提供很多优秀的内建功能。而我们这里需要用到的是 <code class=\"language-text\">firstTab</code> 的功能。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/72B87484BA371209846EF02C6B381FE9.png\" alt=\"72B87484BA371209846EF02C6B381FE9\"></p>\n<p>你可能会觉得这个功能并不足够完成 <code class=\"language-text\">Alt + 2</code>或 <code class=\"language-text\">Alt + 3</code> 等映射，其实不然，仔细阅读它的开源代码你会发现它本身还提供 option 的功能，简单点来说配置方案是酱紫的。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/939C6CA558E0E7230390D3763ED98731.png\" alt=\"939C6CA558E0E7230390D3763ED98731\"></p>\n<p>这里我把映射也一并附上。我个人只习惯用前面几个固定的标签页，你可以根据自己习惯增减。</p>\n<pre class=\"language-text\"><code class=\"language-text\">map &lt;a-1&gt; firstTab\nmap &lt;a-2&gt; firstTab count=2\nmap &lt;a-3&gt; firstTab count=3\nmap &lt;a-4&gt; firstTab count=4</code></pre>\n<p>有了这套方案，我可以很容易的快速回到长期放在第一个标签的 Gmail 页面或者从 Jupyter Notebook 的编程页面中跳出去快速搜索一些东西，而不用借助鼠标，从而提高效率。</p>\n"}}]}}},"context":{}}