{"hash":"8103612fff5ef0c89ce79e17d3acf7f030a00018","data":{"tag":{"title":"Blog","belongsTo":{"edges":[{"node":{"title":"给你的静态博客带来 RSS 订阅","path":"/2020/08/26/bring-rss-to-your-blog/","date":"26. August 2020","timeToRead":1,"description":"最近对于千篇一律的科技新闻，感到了一丝的阅读疲倦。因此，想要寻找一些有有趣的灵魂或者独立思考的博文，打发平时无聊的摸鱼时光。","content":"<p>最近对于千篇一律的科技新闻，感到了一丝的阅读疲倦。因此，想要寻找一些有有趣的灵魂或者独立思考的博文，打发平时无聊的摸鱼时光。但是，随着在互联网上探索有意思的博客，发现绝大部分都没有提供相关的订阅链接，这将很难追踪新博客的发布。这其中，相当一部分博客是通过静态方式发布博客的。</p>\n<p>因此，本文的内容就是通过我的实践展示一下如何给静态博客增加 RSS 订阅。</p>\n<h2 id=\"什么是-rss\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>什么是 RSS</h2>\n<p>首先我们来看一下维基百科上面对 RSS 的定义：</p>\n<blockquote>\n<p><strong>RSS</strong>（全称：<a href=\"https://zh.wikipedia.org/wiki/Resource_Description_Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RDF</a> Site Summary；Really Simple Syndication），中文译作<strong>简易信息聚合</strong>，也称<strong>聚合内容</strong>，是一种<a href=\"https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E4%BE%86%E6%BA%90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">消息来源</a>格式规范，用以<strong>聚合经常发布更新资料的网站</strong>，例如<a href=\"https://zh.wikipedia.org/wiki/%E9%83%A8%E8%90%BD%E6%A0%BC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">博客</a>文章、新闻、<a href=\"https://zh.wikipedia.org/wiki/%E9%9F%B3%E8%A8%8A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">音频</a>或<a href=\"https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A8%8A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">视频</a>的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘资料和授权的元数据。简单来说 RSS 能够让用户订阅个人网站个人博客，当订阅的网站有新文章是能够获得通知。</p>\n</blockquote>\n<p>仔细阅读第二个英文全称，它表达的是 RSS 是一个十分简单的聚合技术，最主要的目的就是给个人网站和博客提供信息聚合，并通知所有订阅的阅读者，使信息能够更高效的传播。这正是我们想要的目的。</p>\n<h2 id=\"rss-的格式\"><a href=\"#rss-%E7%9A%84%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RSS 的格式</h2>\n<p>RSS 的本质其实很简单，只是一份定制化的 XML 文件，我们先来看看该文件的基础定义。这份定义参考自 <a href=\"https://www.rssboard.org/rss-specification\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RSSBoard</a> 网站对于 RSS 2.0 版本的定义所提供的最简单的版本。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>atom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>blog_title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">atom:</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blog_link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>self<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application/rss+xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>blog_link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>xxx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token cdata\">&lt;![CDATA[article_title]]></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>article_link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>guid</span> <span class=\"token attr-name\">isPermaLink</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>article_id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>guid</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span><span class=\"token cdata\">&lt;![CDATA[article_content]]></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pubDate</span><span class=\"token punctuation\">></span></span>article_date<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pubDate</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>channel</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rss</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>可以看到，这份 XML 文件十分简单，仅包括对于需要阅读的内容的基础信息，并没有增加其他复杂的信息。其中比较特殊的可能是 <code class=\"language-text\">guid</code> 这个标签，它提供对于文章的唯一标识，但由于文章的超链接也是唯一的，因此可以把超链接作为 GUID 的标识。</p>\n<h2 id=\"如何生成-rss\"><a href=\"#%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何生成 RSS</h2>\n<p>由于需要根据文章内容动态生成该XML文件，因此一般的静态博客没有动态处理的能力，所以提供不了这种功能。但是，现代化的静态服务平台都提供了 Continuous Integration (CI) 的功能，我们可以利用该功能为我们的博客自动化提供该XML文件。</p>\n<p>实现的思路总体来说就4步：获取最新的文章，根据内容拼接字符串，输出生成内容到 XML 文件，发布 RSS。</p>\n<p>下面，我会以自身为例，在 Github 平台上通过 Travis CI 服务，自动化生成 RSS 文件所应该关注的点进行说明。</p>\n<p><strong>获取最新的文章</strong></p>\n<p>首先我们会遇到第一个问题，该 XML 文件中到底需要包含多少篇文章才算是最新的文章。在这里，我的建议是 10 篇。考虑到个人博客的属性，我们的更新频率不会特别高，10篇文章足以达到人们通常阅读的频率。以 Git 协议管理的时间作为文章的发布时间，是一个不错的选项。</p>\n<p>第二个问题是，RSS 如何知道我哪篇文章是新的？这里就需要严格控制文章的生成的 <code class=\"language-text\">pubDate</code>标签。在 RSS 2.0 的协议规范里面，规定了该时间的时间戳使用的是 <a href=\"http://asg.web.cmu.edu/rfc/rfc822.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 822</a> 的规范。否则，该订阅源在阅读器中会出现混乱的排序情况，尤其注意。Git 命令中提供了 format 选项 “%aD” 可以获取该规范下的时间戳。</p>\n<p><strong>根据内容拼接字符串</strong></p>\n<p>这里有两个标签需要特别注意一下的。</p>\n<p>其一是<code class=\"language-text\">link</code>标签。由于部分人的文件是以中文命名的，这在RSS中并不能直接访问到正确的内容。正确的做法是自行将 URL 手动 encode 成标准的 unicode 编码，可以仅对中文部分处理，也可以对整个 URL 进行编码。一般来说，仅对中文部分处理会使最终生成的 URL 相对好看一些。</p>\n<p>另一是 <code class=\"language-text\">description</code> 标签。由于大部分人现在都是使用 Markdown 语言来写博客，而 markdown 的纯文本并不适合直接阅读，而目前的 RSS 阅读器并不支持渲染 Markdown 语言。我们更希望将它进行解析到 Html 语言，以便后续能够更好的渲染成优秀排版。这里，我们使用万能的瑞士军刀 <code class=\"language-text\">Pandoc</code> 软件即可解析。</p>\n<p>但是，由于 Html 语言和 Xml 的语言都是属于标记型语言，混合在一起容易产生歧义解析。因此需要使用 <code class=\"language-text\">&lt;![CDATA[  html_content  ]]&gt;</code> 逃逸字符来控制 html 内容不属于 xml 的一部分。</p>\n<p><strong>输出生成内容到 XML 文件</strong></p>\n<p>通过不同的编程语言控制文件输出到 XML 这不难。根据自己选择的编程语言生成即可。</p>\n<p>这里，我建议大家对生成的 XML 进行校验，确保生成的 RSS 是正确并能够解析的。W3C 联盟提供了标准的 RSS 文件校验服务：<a href=\"https://validator.w3.org/feed/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://validator.w3.org/feed/</a> ,可以在线输入和链接校验两种方式。</p>\n<p><strong>发布 RSS</strong></p>\n<p>对于静态博客，最直接的方法是将 XML 文件推送到静态服务平台，然后以 RAW 格式访问，即为一个合格的 RSS 订阅链接。</p>\n<p>更进阶一步的方法，可以利用前端框架里面的静态路由方式，解析通用的 <code class=\"language-text\">/feed</code> 路由到生成的 RSS 文件中，配合标准的 RSS 图标 ，能够让人清晰直观的发现该博客提供了 RSS 订阅链接。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>上述的说明只描述了我认为在这个方案中需要注意的事项，隐去了每一步的操作细节。想要抄作业的各位同学，可以移步到 <a href=\"https://github.com/Wsine/blog/blob/master/build.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Wsine/blog/blob/master/build.sh</a> 查看具体的实现方法，直接复制到自己的仓库中就可以使用。</p>\n<p>具体的展示可以查看我的博客看看具体效果：<a href=\"https://wsine.github.io/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wsine.github.io/blog</a> ，也欢迎订阅~</p>\n<p>在这里，我也呼吁大家为自己的博客增加 RSS 订阅链接，如想分享可以在评论区留下你的订阅链接~</p>\n"}},{"node":{"title":"个人博客的方案推荐，你只负责编写","path":"/2019/07/20/personal-blog-writting-solution/","date":"20. July 2019","timeToRead":2,"description":"基于Docsify的无配置无服务器博客方案","content":"<p>今天想要谈谈的是一套我在用的个人博客解决方案，它能带给我最大的便利。</p>\n<p>首先我想先插播一个讨论，为什么要写博客？从我上大学开始，我就喜欢上了写博客。这主要是受到了一位前辈说的话而引发的思考：“当你能够将你所学的有条理地写下来成为一篇文章，那么就证明你学会了。” 当我越是实践这一点，我就越能体会到 写与不写 两者之间的差异。</p>\n<p>以我的经历来揣测，大多数人的博客方案可能经历如下几个阶段：</p>\n<ul>\n<li>主流博客网站：需要考虑的因素就比较多，包括Markdown支持、CSS支持、Javascript支持等，更重要的是原始数据不能很容易地访问；</li>\n<li>私有博客服务器：维护VPS，维护域名，维护流量 是这一方案最大的成本；</li>\n<li>静态网页托管：<code class=\"language-text\">hexo</code>、<code class=\"language-text\">jekyll</code>、<code class=\"language-text\">pelican</code>都是比较主流的方案，但是对客户端本身比较依赖</li>\n</ul>\n<p>直到我遇到了<a href=\"https://docsify.js.org/#/zh-cn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docsify</a>，我更愿意将它称为第四阶段“动态生成网页托管”。</p>\n<h2 id=\"docsify是什么\"><a href=\"#docsify%E6%98%AF%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docsify是什么</h2>\n<p>官方的描述是这样子的：一个神奇的文档网站生成工具</p>\n<blockquote>\n<p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 <code class=\"language-text\">.md</code> 转成 <code class=\"language-text\">.html</code> 文件，所有转换工作都是在运行时进行。</p>\n<p>这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 <code class=\"language-text\">.html</code> 文件“污染” commit 记录，只需要创建一个 <code class=\"language-text\">index.html</code> 就可以开始写文档而且直接<a href=\"https://docsify.js.org/#/zh-cn/deploy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">部署在 GitHub Pages</a>。</p>\n</blockquote>\n<p>第一次看到这样的描述的时候，我就觉得它也很适合用来构建一个博客系统，事实证明确实如此。</p>\n<h2 id=\"docsify有什么\"><a href=\"#docsify%E6%9C%89%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docsify有什么</h2>\n<h3 id=\"markdown支持\"><a href=\"#markdown%E6%94%AF%E6%8C%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Markdown支持</h3>\n<p>在2019年写博客，几乎主流的选择都是使用 Markdown 标记性语言，它很轻量，能让关注在内容本身而不是调格式上。</p>\n<p>但是，Docsify 提供的 Markdown 是原生的美好的感觉，不需要你刻意遵循什么，想怎么写就怎么写的自由；相对的，Hexo 和 Jekyll 都需要遵循一些特殊的格式，比如 {{ 日期 }} 等。这是我很喜爱它的一点。</p>\n<p>官方内置的 Markdown 解析器是<a href=\"https://github.com/markedjs/marked\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">marked</a>，如果不喜欢还可以参考<a href=\"https://docsify.js.org/#/zh-cn/markdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>来自定义。</p>\n<p>###CSS支持</p>\n<p>docsify 提供了内置的5款主题，分别 <code class=\"language-text\">vue.css buble.css dark.css pure.css dolphin.css</code>，我个人是比较喜欢绿色的主题的，所以选了还是默认的 vue.css 风格。另外，Github 上还有很多优秀的第三方主题可供选择。</p>\n<p>当然作为一个开放的系统，它也允许用户自定义，如果有兴趣，撸一个符合自己审美好看的主题也蛮不错的。</p>\n<p>详细的主题 Demo 可以看<a href=\"https://docsify.js.org/#/zh-cn/themes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>~</p>\n<h3 id=\"javascript支持\"><a href=\"#javascript%E6%94%AF%E6%8C%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript支持</h3>\n<h4 id=\"流程图--序列图\"><a href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE--%E5%BA%8F%E5%88%97%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>流程图 &#x26; 序列图</h4>\n<p>有 js 的支持，对我来说意味着能够加入扩展 Markdown 语法，比如流程图、序列图等的支持。我很喜欢 <a href=\"https://typora.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora</a> 这款 MD 编辑器，它自身加入了流程图和序列图等的支持，这对于技术博客来说还是很有用的一大功能。而借助 docsify 的插件系统，简单的配置了一下就能加入这些功能，然后就能做到桌面端编辑和网页端展示是完全一样的效果。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image490.jpg\" alt=\"sequence diagram\"></p>\n<h4 id=\"评论系统\"><a href=\"#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>评论系统</h4>\n<p>docsify 官方支持 Disqus 和 Gitalk 两种评论系统，如果有需要的话也可以很轻易的配置。我个人是比较推荐使用 Gitalk 的，毕竟 Github 账号很多人都有。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image491.jpg\" alt=\"discuss\"></p>\n<p>还有其他很有用的一下功能官方都提供了，具体可以看这里的<a href=\"https://docsify.js.org/#/zh-cn/plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">插件列表</a>。如果需要实现一些特殊的功能也可以自定义，拥有可修改能力就感觉拥有一切一样，这感觉还是很美好的。</p>\n<h3 id=\"数据独立\"><a href=\"#%E6%95%B0%E6%8D%AE%E7%8B%AC%E7%AB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>数据独立</h3>\n<p>这是我最喜欢也是最重要的一点，它不需要你像 Hexo 等系统一样，编写 md 文件，然后通过工具转化为 html 网页静态托管。在 docsify 你只需要专注编写 md 内容本身，保存的也是 md 文件本身，docsify 就会自己读取 md 文件然后渲染成网页展示。</p>\n<p>我认为这是一件很棒的事情，不用再过多的依赖工具本身，编写->部署->托管的三个步骤中，我只需要在意第一个步骤就好了。甚者，由于没有了中间文件，我能直接管理 md 源文件，也相当于一个很好的备份，将数据掌握在自己手中的感觉。</p>\n<p>你的整个目录将会很整洁，就像这样：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── index.html\n├── p01.解决方案\n│   ├── Markdown标题格式化.md\n├── p02.效率之道\n│   ├── <span class=\"token number\">2019</span>年科学的复合密码管理策略.md\n│   ├── 一个5年工科生的软件解决方案与吐槽.md\n│   └── 我的Vim配置.md\n├── p03.生活随想\n│   └── 给大学新生学子的一个思考.md\n└── README.md</code></pre>\n<p>引入 docsify 后唯一增加的一份文件只是一个 index.html 而已，而你原来管理数据的方式还是完全没变化(๑•̀ㅂ•́)و✧</p>\n<h2 id=\"docsify缺什么\"><a href=\"#docsify%E7%BC%BA%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docsify缺什么</h2>\n<p>事实上，docsify 也不是完美的，它也有一些小缺点，但是我们可以通过自定义来修补它。</p>\n<h3 id=\"侧边栏目录\"><a href=\"#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%9B%AE%E5%BD%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>侧边栏目录</h3>\n<p>由于 Web 技术本身的限制，docsify 想要读取你服务端的文件需要用户主动提供路径，否则随便就能读取文件，想想还是很可怕的。</p>\n<p>要想增加侧边栏显示目录，docsify 需要用户自行提供 <code class=\"language-text\">_sidebar.md</code> 文件，里面用 List 记录着你的目录结构。</p>\n<p>但是，很明显，你只想好好写文章，并不想管理这些部署的事情，每新增一篇文章都要同步修改一遍 <code class=\"language-text\">_sidebar.md</code> 文件，还是很麻烦的一件事情。因此，我想到了请一个佣人来帮我完成这件事情，那就是 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a>，一个比较流行的 Github 上的自动化部署服务。然后再花 30s 写一行脚本来生成这个目录。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -mindepth <span class=\"token number\">2</span> -name <span class=\"token string\">\"*.md\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">'/'</span> <span class=\"token string\">'BEGIN {RS=\".md\"} {arr[<span class=\"token variable\">$2</span>]=arr[<span class=\"token variable\">$2</span>]\"<span class=\"token entity\" title=\"\\n\">\\n</span>    - [\"<span class=\"token variable\">$3</span>\"](/\"<span class=\"token variable\">$2</span>\"/\"<span class=\"token variable\">$3</span>\")\"} END { num = asorti(arr, indices); for (i=1; i&lt;=num; ++i) if (indices[i]) print \"- \"indices[i], arr[indices[i]]}'</span> <span class=\"token operator\">></span> _sidebar.md</code></pre>\n<p>具体如何配置 Travis CI 与 Github 之间的联动我这里就不放教程了，官网上有教程，也可以参考仓库里的这个配置：<a href=\"https://github.com/Wsine/blog/blob/master/.travis.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.travis.yml</a></p>\n<h3 id=\"目录折叠\"><a href=\"#%E7%9B%AE%E5%BD%95%E6%8A%98%E5%8F%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>目录折叠</h3>\n<p>这是一个在 docsify 的仓库 issue 中呼声比较高的一个功能，很遗憾这个功能现在还没有，所以就自己做一个吧。</p>\n<p>得益于 docsify 预留了接口给用户自定义插件，借助钩子（hook）的功能，就可以实现目录折叠，文档多了没有折叠功能，浏览起来还是很不方便的。具体的实现可以参考仓库里的这个文件：<a href=\"https://github.com/Wsine/blog/blob/master/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">index.html</a></p>\n<h2 id=\"我的写作流程\"><a href=\"#%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>我的写作流程</h2>\n<p>首先我的写作工具其实有很多地方，我会用手机随时记录灵感，用 iPad 在咖啡厅稍微写点东西，用笔记本电脑在图书馆认认真真写文章，晚上在家里享受机械键盘的声音~~~；无论我用什么工具编写，写完后我都可以通过 Github 网页上传新建一份 md 文件到一个新分支上；借助 Github  的功能，我可以很好地和朋友一起协作；当终稿完成的时候，只需要发一个 Pull Request 合并到 master 分支上即可；这时候会触发 Travis CI 的自动化，帮我生成一个目录到 gh-pages 分支上；然后文章就展示到博客中了。</p>\n<p>如果要用一个流程图来表达会是这个样子的：</p>\n<pre class=\"language-flow\"><code class=\"language-flow\">st<span class=\"token operator\">=></span>start<span class=\"token operator\">:</span> 开始\ned<span class=\"token operator\">=></span>end<span class=\"token operator\">:</span> 结束\nwrite<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 写作\ncooperation<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 协作\nupload<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 上传\nmerge<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 合并到主分支\ngenerate<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 生成目录\ndeploy<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 发布\nlast<span class=\"token operator\">=></span>condition<span class=\"token operator\">:</span> 终稿？\n\nst<span class=\"token operator\">-</span><span class=\"token operator\">></span>write<span class=\"token operator\">-</span><span class=\"token operator\">></span>upload<span class=\"token operator\">-</span><span class=\"token operator\">></span>last\n<span class=\"token function\">last</span><span class=\"token punctuation\">(</span>yes<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>merge<span class=\"token operator\">-</span><span class=\"token operator\">></span>generate<span class=\"token operator\">-</span><span class=\"token operator\">></span>deploy<span class=\"token operator\">-</span><span class=\"token operator\">></span>ed\n<span class=\"token function\">last</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>cooperation<span class=\"token operator\">-</span><span class=\"token operator\">></span>upload</code></pre>\n<h3 id=\"样例demo\"><a href=\"#%E6%A0%B7%E4%BE%8Bdemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>样例Demo</h3>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image492.jpg\" alt=\"Demo\"></p>\n<p>博客地址：<a href=\"https://wsine.github.io/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wsine.github.io/blog</a></p>\n<p>至此，正文部分就结束了，如果还有兴趣的话可以继续阅读下面的部分。docsify 是一块面向文档设计的工具，但是能做成什么取决于使用工具的人，它也不仅仅只能用于说明文档。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>实际上，我所经历的博客建站总共分为三个阶段，我也曾经不断摸索最后才找到最合适自己的方案。</p>\n<h3 id=\"主流博客网站\"><a href=\"#%E4%B8%BB%E6%B5%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>主流博客网站</h3>\n<p>我最开始的写作是在<a href=\"https://www.cnblogs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">博客园</a>平台上。它本身很不错，我最开始选择它的理由是相对小众，以及它的slogan<code class=\"language-text\">代码改变世界</code>很抓我的心，博文页完全没有广告阻挡正文，这些都是我选择它的初衷。</p>\n<p>还有两点我想说，可定制化的页面与可定制化的插件。我很喜欢其中的一款主题：<code class=\"language-text\">Less is more</code>，它基本完全没有样式，但正是如此才最方便地定制一个符合自己审美的CSS，能让写作更加充满动力。其次，博客园平台允许用户申请 JavaScript 权限，这就相当于你可以自由地动态改变页面的内容，比如增加官方不支持的 flowchart 、隐藏彩蛋、<del>删除页面广告(划掉)</del> 等。</p>\n<p>后来，它很早开始支持Markdown也是我喜欢它的一点之一。但是，正值移动端崛起，网站本身对移动端的适配不足且我自定义了UI加大了难度，哪怕我辛苦得做了一版本移动端适配，效果也只是差强人意。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image493.png\" alt=\"Old\"></p>\n<h3 id=\"私有博客平台\"><a href=\"#%E7%A7%81%E6%9C%89%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>私有博客平台</h3>\n<p>我花了一年的时间折腾在Azure上面搭建了自己的博客平台，我很享受这个过程，完全自定义的过程也能让我学到很多。从购买域名，选择技术栈，搭建测试，维护数据库等，这些其实都是无与伦比的经验。专业相关的也建议折腾一番。</p>\n<h3 id=\"静态网页托管\"><a href=\"#%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%89%98%E7%AE%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>静态网页托管</h3>\n<p>我尝试过用Github Page托管<code class=\"language-text\">pelican</code>构建的静态博客，我选的主题很简洁，也能做到clone即可运行，最低的依赖仅仅是python运行环境，不需要安装package。</p>\n<p>好了，回应初心，要不要写博客？我认为是一件值得思考的事情，如果你在犹豫，不妨先写一篇看看~</p>\n"}}]}}},"context":{}}