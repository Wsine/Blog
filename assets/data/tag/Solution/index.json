{"hash":"8103612fff5ef0c89ce79e17d3acf7f030a00018","data":{"tag":{"title":"Solution","belongsTo":{"edges":[{"node":{"title":"我的科研软件流分享","path":"/2020/12/01/my-research-software-solution/","date":"1. December 2020","timeToRead":1,"description":"经历了一年多的博士生学习，来聊聊我目前在科研生活中使用的软件","content":"<p>在少数派2019的年度征文里，我分享了我积累的「<a href=\"https://sspai.com/post/58386\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">科研方法论</a>」。经过一年多的对科研软件的使用，我也逐渐积累了一套自己的软件流程，现整理为文章，希望对你有用。</p>\n<p>在科研的过程中，我经常经历的过程大概只有这几个：阅读论文，讨论 idea，实验记录。所以本文主要还是以这 3 点作为切入点来聊聊，如何将这3个过程变成一个电子化的，系统化的软件流程。</p>\n<h2 id=\"阅读论文\"><a href=\"#%E9%98%85%E8%AF%BB%E8%AE%BA%E6%96%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>阅读论文</h2>\n<p>首先科研离不开的是阅读论文，而一个好的文献管理工具能让你快速的收纳和回顾你所看过的文章。我使用过的文献管理工具有主流的 3 大工具，Mendeley，Endnote 和 Zotero，最后选择的是 Zotero。下面先来说说我为什么喜欢它的独特理由，其他的功能其实都大同小异。</p>\n<h3 id=\"桌面端管理\"><a href=\"#%E6%A1%8C%E9%9D%A2%E7%AB%AF%E7%AE%A1%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>桌面端管理</h3>\n<p>在桌面端，我的需求是筛选论文并且可以快速入库；当论文阅读完觉得值得保留，从 Inbox 转移到特定的 Collection 时，我能够快速编辑相应的字段；当我想起来某篇论文，能够快速找到并查看 PDF 上面的标记。这就是我在桌面端会使用到的最常用的功能了。</p>\n<p><strong>文章编号导入</strong></p>\n<p>这个算是 Zotero 里比较让我眼前一亮的功能了。我们知道，出版商发行出版的书籍会有一个对应的ISBN号，这个编号是唯一的。在文献的领域里面，一般会使用 Digital Object Identifier (DOI) 来作为文章的唯一编号。但是在生命和医学等领域，他们会使用 PubMed Unique Identifier (PMID) 来作为唯一编号。哪怕是对于未发表的文章，比如 arxiv 这种平台的编号，在 Zotero 中通通都支持自动导入。</p>\n<p>但是值得注意的是，这种导入功能还是会跟你的出口 IP 有关系的。因为只有你所在的学校或机构购买对应出版商的访问资格权限，才能直接使用该导入功能，而服务器是根据你的请求所在的 IP 来判断你所在的机构的。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/7d9fbb3aad49338f7b937d244fba4e24.gif\" alt=\"iShot2020-11-29 21.10.51\"></p>\n<p><strong>字段管理</strong></p>\n<p>另一个让我比较喜欢的功能就是简洁的字段管理了。因为 Zotero 本身虽然可以通过 Group 的方式来区分不同子领域的文章，但是实际上当你加入的文章比较多的时候，你的眼睛其实很难检索你脑海中的一篇文章。</p>\n<p>但是，实际上我们对文章记忆比较深的，除了 idea 本身以外，更多的是文章的 short title/short name。这个 short title 在 Zotero 中有专门一个字段「Short Title」，相比于其它的软件，确实更加符合实际的使用需求。</p>\n<p>另一个记忆比较深刻的字段应该属于 Publication 的 short name . 比如机器学习领域的顶会是 ICML，总比记忆 International Conference on Machine Learning 来得实在吧。这个字段在 Zotero 中被称之为 「Series」. 一般情况下对于出名的顶刊 / 顶会都是可以自动填充的。偶尔不能填充的时候，就需要靠自己手动管理了。</p>\n<p>第三个我的使用习惯会对阅读完的文献打上一些标签。那么根据什么来打这个 Tag 呢？我的实战经验是根据论文中约定俗成的分类来打标签。举个例子，假如你的研究课题是模型压缩，那么常见的方法有模型剪枝、模型量化、模型蒸馏等。当你习惯性地打好标签，在实际撰写自己的论文的时候，写 Related Work 的时候基本上就是得心应手。</p>\n<p><strong>分离的存储系统</strong></p>\n<p>Zotero 作为一款开源的产品，使用上是免费的。但是同时，它也有提供有限的免费云存储额度，作为一个轻中度使用的我来说（精挑细选入库），这个额度也是不够的。以我自己的情况举例，Zotero 免费额度为 300M，一年的时间内收纳的论文空间大约为 200M+，基本上不足以承担更长时间的科研学习。</p>\n<p>在 Zotero 的设计中，它允许 Library 中的 Metadata 和文件分开存储计算。由于 Metadata 只是一些结构化的文本信息，存储在 Zotero云 上基本不会占用多大的存储空间，十分充足。对于文件类的存储，Zotero 允许通过 WebDAV 的方式外部存储。</p>\n<p>在这里我选择的是 <a href=\"https://koofr.eu/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Koofr</a> 作为我的存储服务，目前的提供 WebDAV 服务的云盘选择已经不多了，Koofr 对于免费用户能默认提供 2G 的存储空间，不限制流量。对于文献管理这一需求来专用已经足够了。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/55cf8435ea0ad6d893afd536f4e7b57d.png\" alt=\"image-20201129213729416\"></p>\n<h3 id=\"平板端管理\"><a href=\"#%E5%B9%B3%E6%9D%BF%E7%AB%AF%E7%AE%A1%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>平板端管理</h3>\n<p>平常情况下，我的阅读都是在 iPad 端完成的。我最大的需求，就是能够在 iPad 上配合 Apple Pencil 书写，然后将我的标记和手写笔记都同步到云端，就足够了。</p>\n<p><strong>流畅的书写体验</strong></p>\n<p>首先，第一点我追求的就是书写体验，主要有两点，流畅性和笔尖连续。由于编辑的对象是一个通用的 PDF 格式，而不是笔记应用常见的矢量格式。因此完全支持 Apple Pencil 全部功能的 iPad PDF 应用，其实也不多，但是要是再加一个云存储的特性，我能筛选下来的就只剩下 PDF Expert 和 Papership 两款应用了。</p>\n<p>我有大半年的时间都在使用 PDF Expert，在转订阅制前付费购买，在 PDF 编辑领域，它真的可以说是Expert。书写感觉，手势缩放，快速切换自己选择好的笔，基本没有比它更好的选择了。但是它开始转订阅制后，无论是和Onedrive双向同步的云端文件还是纯iPad本地端的，都出现了明显的卡顿，也正是此契机，我才会开始寻找下一款能支撑我需求的软件。</p>\n<p>而我找到的就是 Papership，这也是一款内购应用。开发者甚至非常用心，内置了一份开放的 PDF 文件给用户试用标注和笔记等功能，然后再决定是否付费内购。我认为这种开发模式非常值得借鉴。在书写体验方面，Papership 我认为做到了和 PDF Expert 一样的体验，切换笔这方面有所缺失，我也致信开发者提了该建议。但是选择它更重要的下面的这个特性。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/21e1ca086b4d64d987ca3a70b79e3533.png\" alt=\"fluent-writing\"></p>\n<p><strong>WebDAV 同步</strong></p>\n<p>Papership 在我的理解中，更像是一款为适配 Zotero 的第三方应用，但是它做得很棒。首先，它的登陆账号直接就是 Zotero 的账号，用于下载和同步论文的结构化数据。另一方面，也配合 Zotero 的方式，提供 WebDAV 外部存储方式。因此，只要和桌面端填写的内容是一致的，就是同步的，体验非常棒。</p>\n<p>这里有一个小插曲，Papership 对于WebDAV 的Zotero空白存储文件夹同步有一点问题，需要自行加入<code class=\"language-text\">lastsync.txt</code>文件。详情解决方案可以看这里：<a href=\"https://koofr.eu/blog/posts/using-papership-with-zotero-and-koofr-on-your-mobile-devices\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://koofr.eu/blog/posts/using-papership-with-zotero-and-koofr-on-your-mobile-devices</a></p>\n<blockquote>\n<p><strong>Note</strong>: If you are receiving an error and are not able to <strong>Verify Server</strong>, check if you have a <em>lastsync.txt</em> file in the <strong>zotero folder</strong> in Koofr. Sometimes the connection doesn't work without this file. You can create the text file in your <strong>zotero folder</strong> in Koofr yourself. The file can be empty and the connection will still work.</p>\n</blockquote>\n<h2 id=\"草稿本\"><a href=\"#%E8%8D%89%E7%A8%BF%E6%9C%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>草稿本</h2>\n<p>在日常的科研工作中，我们经常需要构思 idea，一边写一边构思，能十分有效地帮助你进行思考。这个需求我推荐两种工具。</p>\n<p>第一种是货真价实的笔记本+签字笔。很多时候，你不仅仅是只有自己在科研，当你和别人讨论的时候，其实大家都需要在纸上表达自己正在说的思路。我也尝试过把 iPad 和 Apple Pencil 一起带上，也递给别人用，但是对方毕竟不是长期用户，并不习惯，总是打断了思维的碰撞。因此和别人讨论的时候，我还是建议使用一个传统的工具，有利于沟通的进行。</p>\n<p>另一方面，对于自己的思维构建，我推荐的是少数派上的自荐的一款应用「无限草稿 InfDraft」，它很简单，就是一款使用了苹果官方 ApplePenKit 开发的无限画布类的纯本地应用。但也正是因为简单，它比起大厂比如微软的 WhiteBoard 和谷歌的 Jamboard 的体验都要好，主要就是在流畅这点上。大牌的应用对于手掌识别或者是笔的套件的适配我认为都还没达到理想的状态，但是我也会持续观察。</p>\n<p>总而言之，有了便利的草稿本，日常就能为地球环保节省下很多的纸张，也能快捷地修改自己写错的地方，这就是电子草稿的优势。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/08bbfbcbc3bbebbab52253682dfcf064.png\" alt=\"inf-draft\"></p>\n<h2 id=\"笔记记录\"><a href=\"#%E7%AC%94%E8%AE%B0%E8%AE%B0%E5%BD%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>笔记记录</h2>\n<p>最后一项想聊聊的是，实验数据的记录整理。我的选择是 Notion，一款标称 All-in-one 的笔记 Web 应用。可以做快速的图片混合排版，记录你对自己 Research Problem 的 Timeline。包括在这个 Topic 中你的 target 是什么，遇到的问题，你当前思考的解决方案，next step 要尝试什么，都可以快速记录在案并得到一个相对赏心悦目的页面，而不用花太多时间。</p>\n<p>我比较喜欢它的一点是笔记内嵌了一个 Database，正好适合用来做实验数据的记录，少数派网站上面有很多的关于 Notion 的高级用法，用于科研生活中真的挺顺手的。因为在实际的需求，你不仅仅只用一个表格记录数字，你还需要做统计，Notion Database 自带的 Formula 真的特别方便，不用管理 EXCEL 文件了。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/bd1a166da542c0b094db49dbd329a45e.png\" alt=\"Snipaste_2020-12-02_13-22-30\"></p>\n<p>另一点，我喜欢的是它的分享功能，作为一个网页，不需要注册登陆也能看到。当你最终做完实验的时候，分享实验数据给老板，说服 Supervisor 信服你的实验结果也是一个很重要的科研过程。你的数据越完整，支撑的信息越多，潜在地更有说服力。</p>\n<hr>\n<p>以上，就是我在科研工作中日常使用的软件了，也欢迎在评论区留言分享互相学习。</p>\n"}},{"node":{"title":"给你的静态博客带来 RSS 订阅","path":"/2020/08/26/bring-rss-to-your-blog/","date":"26. August 2020","timeToRead":1,"description":"最近对于千篇一律的科技新闻，感到了一丝的阅读疲倦。因此，想要寻找一些有有趣的灵魂或者独立思考的博文，打发平时无聊的摸鱼时光。","content":"<p>最近对于千篇一律的科技新闻，感到了一丝的阅读疲倦。因此，想要寻找一些有有趣的灵魂或者独立思考的博文，打发平时无聊的摸鱼时光。但是，随着在互联网上探索有意思的博客，发现绝大部分都没有提供相关的订阅链接，这将很难追踪新博客的发布。这其中，相当一部分博客是通过静态方式发布博客的。</p>\n<p>因此，本文的内容就是通过我的实践展示一下如何给静态博客增加 RSS 订阅。</p>\n<h2 id=\"什么是-rss\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>什么是 RSS</h2>\n<p>首先我们来看一下维基百科上面对 RSS 的定义：</p>\n<blockquote>\n<p><strong>RSS</strong>（全称：<a href=\"https://zh.wikipedia.org/wiki/Resource_Description_Framework\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RDF</a> Site Summary；Really Simple Syndication），中文译作<strong>简易信息聚合</strong>，也称<strong>聚合内容</strong>，是一种<a href=\"https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E4%BE%86%E6%BA%90\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">消息来源</a>格式规范，用以<strong>聚合经常发布更新资料的网站</strong>，例如<a href=\"https://zh.wikipedia.org/wiki/%E9%83%A8%E8%90%BD%E6%A0%BC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">博客</a>文章、新闻、<a href=\"https://zh.wikipedia.org/wiki/%E9%9F%B3%E8%A8%8A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">音频</a>或<a href=\"https://zh.wikipedia.org/wiki/%E8%A6%96%E8%A8%8A\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">视频</a>的网摘。RSS文件（或称做摘要、网络摘要、或频更新，提供到频道）包含全文或是节录的文字，再加上发布者所订阅之网摘资料和授权的元数据。简单来说 RSS 能够让用户订阅个人网站个人博客，当订阅的网站有新文章是能够获得通知。</p>\n</blockquote>\n<p>仔细阅读第二个英文全称，它表达的是 RSS 是一个十分简单的聚合技术，最主要的目的就是给个人网站和博客提供信息聚合，并通知所有订阅的阅读者，使信息能够更高效的传播。这正是我们想要的目的。</p>\n<h2 id=\"rss-的格式\"><a href=\"#rss-%E7%9A%84%E6%A0%BC%E5%BC%8F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>RSS 的格式</h2>\n<p>RSS 的本质其实很简单，只是一份定制化的 XML 文件，我们先来看看该文件的基础定义。这份定义参考自 <a href=\"https://www.rssboard.org/rss-specification\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RSSBoard</a> 网站对于 RSS 2.0 版本的定义所提供的最简单的版本。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rss</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>atom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2005/Atom<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>channel</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>blog_title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">atom:</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blog_link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>self<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application/rss+xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>blog_link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>xxx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token cdata\">&lt;![CDATA[article_title]]></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span><span class=\"token punctuation\">></span></span>article_link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>link</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>guid</span> <span class=\"token attr-name\">isPermaLink</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>article_id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>guid</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span><span class=\"token cdata\">&lt;![CDATA[article_content]]></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pubDate</span><span class=\"token punctuation\">></span></span>article_date<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pubDate</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>channel</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>rss</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>可以看到，这份 XML 文件十分简单，仅包括对于需要阅读的内容的基础信息，并没有增加其他复杂的信息。其中比较特殊的可能是 <code class=\"language-text\">guid</code> 这个标签，它提供对于文章的唯一标识，但由于文章的超链接也是唯一的，因此可以把超链接作为 GUID 的标识。</p>\n<h2 id=\"如何生成-rss\"><a href=\"#%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90-rss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何生成 RSS</h2>\n<p>由于需要根据文章内容动态生成该XML文件，因此一般的静态博客没有动态处理的能力，所以提供不了这种功能。但是，现代化的静态服务平台都提供了 Continuous Integration (CI) 的功能，我们可以利用该功能为我们的博客自动化提供该XML文件。</p>\n<p>实现的思路总体来说就4步：获取最新的文章，根据内容拼接字符串，输出生成内容到 XML 文件，发布 RSS。</p>\n<p>下面，我会以自身为例，在 Github 平台上通过 Travis CI 服务，自动化生成 RSS 文件所应该关注的点进行说明。</p>\n<p><strong>获取最新的文章</strong></p>\n<p>首先我们会遇到第一个问题，该 XML 文件中到底需要包含多少篇文章才算是最新的文章。在这里，我的建议是 10 篇。考虑到个人博客的属性，我们的更新频率不会特别高，10篇文章足以达到人们通常阅读的频率。以 Git 协议管理的时间作为文章的发布时间，是一个不错的选项。</p>\n<p>第二个问题是，RSS 如何知道我哪篇文章是新的？这里就需要严格控制文章的生成的 <code class=\"language-text\">pubDate</code>标签。在 RSS 2.0 的协议规范里面，规定了该时间的时间戳使用的是 <a href=\"http://asg.web.cmu.edu/rfc/rfc822.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC 822</a> 的规范。否则，该订阅源在阅读器中会出现混乱的排序情况，尤其注意。Git 命令中提供了 format 选项 “%aD” 可以获取该规范下的时间戳。</p>\n<p><strong>根据内容拼接字符串</strong></p>\n<p>这里有两个标签需要特别注意一下的。</p>\n<p>其一是<code class=\"language-text\">link</code>标签。由于部分人的文件是以中文命名的，这在RSS中并不能直接访问到正确的内容。正确的做法是自行将 URL 手动 encode 成标准的 unicode 编码，可以仅对中文部分处理，也可以对整个 URL 进行编码。一般来说，仅对中文部分处理会使最终生成的 URL 相对好看一些。</p>\n<p>另一是 <code class=\"language-text\">description</code> 标签。由于大部分人现在都是使用 Markdown 语言来写博客，而 markdown 的纯文本并不适合直接阅读，而目前的 RSS 阅读器并不支持渲染 Markdown 语言。我们更希望将它进行解析到 Html 语言，以便后续能够更好的渲染成优秀排版。这里，我们使用万能的瑞士军刀 <code class=\"language-text\">Pandoc</code> 软件即可解析。</p>\n<p>但是，由于 Html 语言和 Xml 的语言都是属于标记型语言，混合在一起容易产生歧义解析。因此需要使用 <code class=\"language-text\">&lt;![CDATA[  html_content  ]]&gt;</code> 逃逸字符来控制 html 内容不属于 xml 的一部分。</p>\n<p><strong>输出生成内容到 XML 文件</strong></p>\n<p>通过不同的编程语言控制文件输出到 XML 这不难。根据自己选择的编程语言生成即可。</p>\n<p>这里，我建议大家对生成的 XML 进行校验，确保生成的 RSS 是正确并能够解析的。W3C 联盟提供了标准的 RSS 文件校验服务：<a href=\"https://validator.w3.org/feed/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://validator.w3.org/feed/</a> ,可以在线输入和链接校验两种方式。</p>\n<p><strong>发布 RSS</strong></p>\n<p>对于静态博客，最直接的方法是将 XML 文件推送到静态服务平台，然后以 RAW 格式访问，即为一个合格的 RSS 订阅链接。</p>\n<p>更进阶一步的方法，可以利用前端框架里面的静态路由方式，解析通用的 <code class=\"language-text\">/feed</code> 路由到生成的 RSS 文件中，配合标准的 RSS 图标 ，能够让人清晰直观的发现该博客提供了 RSS 订阅链接。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>上述的说明只描述了我认为在这个方案中需要注意的事项，隐去了每一步的操作细节。想要抄作业的各位同学，可以移步到 <a href=\"https://github.com/Wsine/blog/blob/master/build.sh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Wsine/blog/blob/master/build.sh</a> 查看具体的实现方法，直接复制到自己的仓库中就可以使用。</p>\n<p>具体的展示可以查看我的博客看看具体效果：<a href=\"https://wsine.github.io/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wsine.github.io/blog</a> ，也欢迎订阅~</p>\n<p>在这里，我也呼吁大家为自己的博客增加 RSS 订阅链接，如想分享可以在评论区留下你的订阅链接~</p>\n"}},{"node":{"title":"NS大屏共享的小众方案","path":"/2020/06/15/switch-screen-to-laptop-or-pc/","date":"15. June 2020","timeToRead":1,"description":"你是否曾经苦恼在宿舍里生活，偶尔想跟舍友来打一把大乱斗却苦于NS屏幕太小不尽兴？","content":"<p>你是否曾经苦恼在宿舍里生活，偶尔想跟舍友来打一把大乱斗却苦于NS屏幕太小不尽兴？</p>\n<p>你是否曾经苦恼租房在外只有自己一个小房间，无法跟朋友一起欢畅地众乐乐？</p>\n<p>本文就是提供一个相对廉价的方案来解决以上的烦恼。</p>\n<h3 id=\"对比方案\"><a href=\"#%E5%AF%B9%E6%AF%94%E6%96%B9%E6%A1%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>对比方案</h3>\n<p>大家可能也看过不少的文章，现有的常见方案大概有以下几种，也有它各自的优缺点。</p>\n<p><strong>客厅大电视</strong></p>\n<p>在客厅坐着大沙发对着大电视/投影仪来一起玩 Switch 上面的合众欢游戏，无疑是最高的游戏体验。但是这个问题也在于需要有一个大客厅，也需要有一台大电视，对于在外租房的工薪一族来说比较奢侈，而且现在很对租房把客厅也间隔成了一个房间出租以获取更高的租金。</p>\n<p><strong>房间投影仪</strong></p>\n<p>投影仪是一个可以收纳但又能获得大屏幕的解决方案。但是问题一般在于，投影仪可能并不自带音响，而且摆放的位置不能给你带来类立体声的效果（很难摆在正前方）。导致实际体验中，往往体验较差。投影仪对光照的条件要求很高，也即对空间金钱的要求很高，要是在拉上窗帘漆黑的房间中，妹子可能就不愿意来了，怎么促进感情发展呢？好的投影仪，比一台电视还要贵。</p>\n<p><strong>工作台显示器</strong></p>\n<p>不少的小伙伴都喜欢在租房/宿舍里配备一台显示器来提高工作效率，这个是一个不错的解决方案。只需要解决显示器可能不自带音响的问题就可以了，买一个蓝牙模块或者能3.5mm接口的音箱就能解决。但要是考虑到常搬家，书桌空间不够大，可能这个方案就不适合这类人。</p>\n<p><strong>便携显示屏</strong></p>\n<p>自从老罗在锤子发布会上介绍了TNT后，以 GoBigger 为代表的便携式显示屏便进入到大众的眼中。Type-C接口直连，充电宝/电源反向供电等特性，都是它的加分项。如果说缺点的话，也只有1000+的起步价格和多一款设备的迁移负担。网上也有DIY的解决方案，但是对玩家要求较高，就不做评价。</p>\n<h3 id=\"本文方案\"><a href=\"#%E6%9C%AC%E6%96%87%E6%96%B9%E6%A1%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>本文方案</h3>\n<p>如果你也有上述的顾虑，本文所推荐的是使用 &#x3C;采集卡> 这个方案。</p>\n<p>我买的是 Acasis 家的采集卡，我在亚马逊上面买的，国内淘宝也有售，最低只需要 200+ 的价格即可满足 NS 大屏共享的需求。唯一的前置要求是需要你有一台自己的电脑，无论是笔记本还是台式都可以。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/640f7b287e0c26c1a60cabdbb9b94398.jpg\" alt=\"Slide1\"></p>\n<p>对比采集卡本身的体积和鼠标，可以看出采集卡本身非常的小。</p>\n<p><strong>工作方式</strong></p>\n<p>绝大部分的电脑配备的 HDMI 接口都是输出口，所以不能接收 NS 底座传输过来的视频信号。采集卡的作用，就是接收 NS 底座的视音频信号转换为数字信号，通过 USB 接口传输给电脑播放。用一张图来表示是这样子的：</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/920173607cb6084d97dc80d7cdfa8822.png\" alt=\"Slide2\"></p>\n<p><strong>电脑设置</strong></p>\n<p>采集卡本身是免驱的，直接连接电脑就可以使用。常用的软件都支持打开串流的，这里以 PotPlayer 为例。右击界面，依次点击「打开」，「设备设置」，「模拟TV」，选择「ACASIS」设备即可。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/4874740a0d7232ac2946e6a9e216d2da.PNG\" alt=\"Slide3\"></p>\n<p>实际体验下来，实际的延迟只有0.1s，几乎感受不到，玩大乱斗这种对延迟要求高的游戏也没有问题。</p>\n<p><strong>性能要求</strong></p>\n<p>如果你只是需要播放的话，采集卡本身对电脑的性能要求极低。我使用的笔记本电脑是超极本，配备第一代酷睿m3处理器，实际体验也没有任何问题。</p>\n<p>如果设备性能真的过低，这里有一个小技巧可以教你。在软件端关掉声音的捕获，在系统端直接&#x3C;侦听>采集设备。这样子设置，不需要经过软件图音同步减少处理量，用硬件直出声音对性能要求更低。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/6f784cf5f9f82aded688ddd7e2215414.PNG\" alt=\"Slide4\"></p>\n<h3 id=\"用户体验\"><a href=\"#%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>用户体验</h3>\n<p>我已经买了这个设备体验快一个月了，目前并没有遇到别的问题。这套方案的优点在于性价比高，特别适合小房间租房和在校宿舍生的人群。想跟朋友一起玩，平时也不会有特别多的小伙伴一起同屏打游戏，毕竟笔记本屏幕两个人刚刚好，再多就有点显得拥挤了。面对搬家，也不用因为多一个显示屏/电视多增添一份烦恼。</p>\n<p>最后，还有一个极客用法。通过网络分享屏幕同时跟女朋友连麦聊天互动，有时候比硬拉女朋友一起打游戏更有促进作用喔。</p>\n"}},{"node":{"title":"Windows平台下的少数派新写稿流程","path":"/2020/06/02/writting-for-sspai-on-windows/","date":"2. June 2020","timeToRead":1,"description":"谈及写作，不少的用户都是使用 Mac 平台配合多样的 App 完成从写稿到发布的一条龙服务","content":"<p>谈及写作，不少的用户都是使用 Mac 平台配合多样的 App 完成从写稿到发布的一条龙服务。但是在 Windows 平台上，往往需要很多手动的过程。比如，在少数派平台上，官方提供了专用的接口给 MWeb App 完成从写稿、插图、发布的完善服务，但是 MWeb App 仅在 Mac 平台上提供，Windows 用户常常因为插图图床问题困扰。</p>\n<p>最近，随着两大写作好伴侣 App 的更新，这一情况得以改善。PicGo 迎来了 v2.0 版本的大更新，剥离了核心功能同时支持 CLI 调用和 API 调用。Typora 集成了 PicGo 并提供一键上传图片服务。如果需要更详细的资料，请看这两篇文章：</p>\n<p><a href=\"https://sspai.com/post/52527\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">图床「神器」PicGo v2.0更新，插件系统终于来了</a></p>\n<p><a href=\"https://sspai.com/post/59128\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora 支持自定义图片上传服务了</a></p>\n<p>配合上述两大神器，是否有方法能够改善少数派平台上的写作流程，下面我就来谈谈我的方案。</p>\n<h2 id=\"typora-之功能增强\"><a href=\"#typora-%E4%B9%8B%E5%8A%9F%E8%83%BD%E5%A2%9E%E5%BC%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Typora 之功能增强</h2>\n<p>首先，从 Typora 官网上能够下载 Win / Linux / OSX 对应平台的安装文件并正确安装。</p>\n<p>然后，我们需要启用图片上传功能。点击 File -> Preferences -> Image，在 Image Upload Setting 那栏，选择 PicGo-Core (command line) ，然后点击 Download and Upgrade，即可完成安装。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/628cb7601505f1aaf9d736a4f59f68a6.png\" alt=\"enhance\"></p>\n<h2 id=\"picgo-之少数派插件\"><a href=\"#picgo-%E4%B9%8B%E5%B0%91%E6%95%B0%E6%B4%BE%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PicGo 之少数派插件</h2>\n<p>得益于 PicGo 的插件系统，我们可以为少数派平台编写插件，快捷完成图片上传到少数派的服务器。那么，如何安装少数派插件？</p>\n<p>步骤一</p>\n<p>首先我们打开 PicGo 配置文件所在的目录，你可以点击上图的 Open Config File 按钮，或者手动打开对应平台的文件夹。</p>\n<p>Windows 平台位于<code class=\"language-text\">C:\\Users\\&lt;your username&gt;\\.picgo\\</code></p>\n<p>Linux 和 OSX 平台位于`~/.picgo/<code class=\"language-text\"></code></p>\n<p>然后，克隆或下载<a href=\"https://github.com/Wsine/picgo-plugin-sspai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github.com/Wsine/picgo-plugin-sspai</a>仓库到该文件夹中，注意如果从网页端下载，解压后去除多余的分支名，这很重要。</p>\n<p>步骤二</p>\n<p>在 PicGo 配置文件夹下创建<code class=\"language-text\">node_modules</code>文件夹，并在里面创建同名快捷方式/软链接，指向刚才下载的仓库文件夹。</p>\n<p>步骤三</p>\n<p>编辑`package.json<code class=\"language-text\"></code>文件，修改里面的依赖项。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"picgo-plugin-sspai\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"file:picgo-plugin-sspai\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>步骤四</p>\n<p>创建`package-lock.json<code class=\"language-text\"></code>，内容填充如下：</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"picgo-plugins\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"requires\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lockfileVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"picgo-plugin-sspai\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"file:picgo-plugin-sspai\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>验证</p>\n<p>最终配置文件夹中的目录结构如应如下图所示</p>\n<pre class=\"language-text\"><code class=\"language-text\">~/.picgo &gt; tree\n.\n├── config.json\n├── node_modules\n│   └── picgo-plugin-sspai &lt;soft link&gt;\n├── package.json\n├── package-lock.json\n├── picgo.log\n└── picgo-plugin-sspai\n    ├── index.js\n    ├── License\n    ├── md5.min.js\n    ├── package.json\n    └── README.md</code></pre>\n<h2 id=\"配置个人信息\"><a href=\"#%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>配置个人信息</h2>\n<p>打开少数派官网，登陆自己的账号，然后按F12打开开发者模式，找到 Console 选项卡，输入</p>\n<p>`document.cookie.split('; sspai_cross_token=').pop().split(';').shift()<code class=\"language-text\"></code></p>\n<p>该命令会返回一串字符串，记住该字符串，并重新在 Typora 中打开 PicGo 的配置文件，替换下面样例的 token 占位符，保存</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"picBed\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"current\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sspai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"uploader\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sspai\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"transformer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"base64\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sspai\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"cross_token\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;replace here>\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"picgoPlugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"picgo-plugin-sspai\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>好了，至此为止，你已完成了全部的配置，那么来看看效果如何吧。</p>\n<h2 id=\"样例效果\"><a href=\"#%E6%A0%B7%E4%BE%8B%E6%95%88%E6%9E%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>样例效果</h2>\n<p>我们就以本文作为目标图片展示一下该写作流程的优化吧，通过菜单栏的 Format -> Image -> Upload All Local Images 能够一键上传该文章下面的全部图片，也可以通过右击图片的方式单张图片上传</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/4472f6471191c61072d1e54de3f941d9.gif\" alt=\"example\"></p>\n<p>最后，打开少数派网站的编辑器，复制全文富文本格式进去，即可完成发布流程。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>该插件的开发仅仅是为了方便用户在少数派平台上写作而创作。图床，一直是流量消耗的大户，目前少数派的图床仅能在 sspai.com 域名下显示，也即启用的防盗链技术，如有别的用途的用户就不用折腾啦。</p>\n<p>等后续的 Typora 更新了发布功能，我会再来优化该流程。那么，希望这个插件能帮得到大家。</p>\n"}},{"node":{"title":"单卡手机「变」双卡的使用方案","path":"/2020/04/21/single-sim-to-dual-sim/","date":"21. April 2020","timeToRead":1,"description":"今天想来聊聊的是一个单卡手机也能媲美双卡手机的使用方案","content":"<p>今天想来聊聊的是一个单卡手机也能媲美双卡手机的使用方案。如果你正好在使用中国移动的套餐计划也有使用双卡的需求，那么就请往下看吧。</p>\n<h2 id=\"手机号码的需求\"><a href=\"#%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E7%9A%84%E9%9C%80%E6%B1%82\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>手机号码的需求</h2>\n<p>首先我们需要明确我们对于副卡的常用场景有哪些，如果你还有除了下面有更多的使用场景，可能本套方案并不合适你。</p>\n<p>回想一下，我们如今生活中大部分的场景，对于原生电话和短信的使用是否还只剩下这些：</p>\n<ul>\n<li>接收快递的信息</li>\n<li>接收广告的信息</li>\n<li>接收外卖的送达电话</li>\n</ul>\n<p>自从2013年9月1日，工信部颁布了电话实名制要求后，各大互联网服务都加入了绑定手机号的功能，甚至是刚性要求。渐渐地，手机号码对我们而言，变成了一个实名身份认证入口，和新增了新的使用场景：</p>\n<ul>\n<li>接收验证码的信息</li>\n</ul>\n<p>我们使用互联网服务需要验证手机号码，我们更换新手机号码又需要付出巨大的迁移成本，那倒不如将这个旧号码转换为一个实用的手机 App，来帮你管理上述的场景。</p>\n<h3 id=\"无忧行：不仅仅是出国神器\"><a href=\"#%E6%97%A0%E5%BF%A7%E8%A1%8C%EF%BC%9A%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AF%E5%87%BA%E5%9B%BD%E7%A5%9E%E5%99%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>无忧行：不仅仅是出国神器</h3>\n<p>「无忧行」是中国移动国际有限公司提供服务的 App，它主打的是出国旅游的服务，但由于是一家电信运营商背景的公司，因此服务更偏向于手机通讯相关的类型。</p>\n<p>接收来电与短信，是我们这次的目标功能。它的开启方法非常简单，不需要额外的申请，使用的资费也是免费，唯一的要求就是你的主卡能够连接上互联网。</p>\n<p>那么如何开启呢？首先在各大应用商场下载「无忧行」 App，将副卡插入手机中，点击一下 “设备安全认证”，App 就会读取你当前的手机卡信息。认证成功后，移出副卡，点击一下“免费接收来电和短信”按钮，就完成了整个功能开启的流程。</p>\n<p>日常的使用场景里，它会使用系统推送给你发送短信通知和来电提醒，跟真实使用原生的电话和短信功能没有太大的差别。该服务甚至还提供了来电号码显示的功能，要知道一般来说这可是作为套餐的收费点来宣传的。要说唯二的差别是，来电没有全屏强制占用屏幕，以及失去了系统级别的复制验证码功能。但是作为一个免费的服务，我觉得已经很良心了。</p>\n<p>当你把副卡重新连接基站的时候，这个 App 的接听短信功能就会关闭。当你再次关机或移出sim卡的时候，就能够手动再次开启该功能，我觉得是非常贴心的设计。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/1330edde4a43554b1e1f65c16872804f.PNG\" alt=\"Slide1\"></p>\n<h3 id=\"无忧行：还真是出国神器\"><a href=\"#%E6%97%A0%E5%BF%A7%E8%A1%8C%EF%BC%9A%E8%BF%98%E7%9C%9F%E6%98%AF%E5%87%BA%E5%9B%BD%E7%A5%9E%E5%99%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>无忧行：还真是出国神器</h3>\n<p>当然，无忧行本身主打的功能也是很不错的。</p>\n<p>出国流量：基本上如果你只需要出国几天，那么这是最方便的服务。你可以在 App 中购买跨境流量，以香港为例，很多人都有香港一日游的需求，但又怕无法上网迷路或代购聊天比价不方便。</p>\n<p>在 App 中最低只需要8元/天，基本满足查询信息的流量需求。开启手机的漫游选项，当你到达香港的时候会自动开启，这样也不用担心购买的时间点与开始使用的时间点不吻合的各种问题。</p>\n<p>跨境通话：基本上，无忧行每个月都会赠送100分钟的拨打至中国内地的免费通话分钟数。如果有什么紧急需求可以直接拨打，也是十分的省心。同样的也可以购买对应地区的通话时长，以美国地区为例，12元/100分钟的资费确实不贵。</p>\n<p>境外当地号：无忧行会随机分配一个境外号码，拨打电话会显示该号码。用来联系当地的酒店、租车和餐饮等服务都是非常实用的功能，有国外旅行经验的人就懂了。资费根据不同国家会有所不同。</p>\n<h2 id=\"适用人群\"><a href=\"#%E9%80%82%E7%94%A8%E4%BA%BA%E7%BE%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>适用人群</h2>\n<p>我认为无忧行 App 本身挺适合以下几类需要用到双手机号码的人的：</p>\n<ul>\n<li>手上只有单卡手机的用户</li>\n<li>更换了新手机号码，但需要保留旧号码一段时间的用户</li>\n<li>不喜欢两台手机要反复充电的用户</li>\n<li>有大量国外语音通讯需求的用户</li>\n</ul>\n<h2 id=\"好物分享\"><a href=\"#%E5%A5%BD%E7%89%A9%E5%88%86%E4%BA%AB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>好物分享</h2>\n<p>最后，分享一个实用的小神器。从此快速换卡真的方便了很多很多，对于经常出入海关的人来说太方便了。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/f2253357952ee19c0e6b1999ae1340ef.PNG\" alt=\"Slide2\"></p>\n<p>方法总比困难多，我们下篇文章再见~</p>\n"}},{"node":{"title":"我的资料存储方案分享","path":"/2020/03/09/my-file-storage-solution/","date":"9. March 2020","timeToRead":1,"description":"今天来聊聊存储相关的事情，分享一下我现在所使用的方案","content":"<p>[TOC]</p>\n<p>今天打算来聊一下存储相关的事情，分享一下我现在所使用的方案。</p>\n<p>相信有不少的小伙伴都经历过数据丢失的事情，比如经典的如下场景：</p>\n<ul>\n<li>我换/丢手机了，手机号码都丢失了，大家发我一下手机号码呀</li>\n<li>我写了几个月的毕业论文，电脑硬盘就坏了，没有备份……</li>\n<li>我以前拍了好多照片，换手机后没有，好怀念啊</li>\n<li>我以前做过这个，但是很久以前了，现在找不到了</li>\n</ul>\n<p>机器有价，数据无价，本文的目的就是希望能够给大家一个视角分享一下我是如何规避这些问题的。</p>\n<h2 id=\"数据策略\"><a href=\"#%E6%95%B0%E6%8D%AE%E7%AD%96%E7%95%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>数据策略</h2>\n<p>相比起单纯的分享我使用了什么软件，更重要的我认为是分享如何约束指导自己选择这些方案。</p>\n<p>整体来说，我考察一个软件/服务是否适合我，我看重这3个方面。</p>\n<p>便携性：2014年3月27日，微软CEO纳德拉提出了 【移动为先云为先】的战略指导方针，基本上预告了后面5年网络世界的发展，同时也成为了我数据存储的重要考虑因素——云存储。这个概念相信大家已不陌生。在2020年的今天，数据流量和随时随地访问互联网已经不再成为大多数人的瓶颈，所以云存储也就顺势地成为了一个特别方便的工具。</p>\n<p>易用性：用云存储连接一切，已经成为了我生活方式的一部分。它能充当一个桥梁的作用，在不同的应用和设备间进行访问。协议和文件格式是其中比较重要的部分。磨刀不误砍柴工，研究效率的人常爱挂在嘴边的话，我很享受高效率的感觉。</p>\n<p>持久性：除了云存储本身带来的持久化存储，更重要的我觉得是不能够太轻易被一个平台/工具所绑定。虽然我在这方面也没办法100%做到，但是尽量去做总归是好的。最后，有一份自己的本地拷贝，虽然云存储服务商做了很多容灾工作，但是事故发生的时候谁也不希望的，历史上也发生过。你可能会得到赔偿，但你的数据还是不见了。</p>\n<h2 id=\"用云存储连接一切\"><a href=\"#%E7%94%A8%E4%BA%91%E5%AD%98%E5%82%A8%E8%BF%9E%E6%8E%A5%E4%B8%80%E5%88%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>用云存储连接一切</h2>\n<p>多说无益，下面就直接开始我现在的方案。</p>\n<h3 id=\"文件\"><a href=\"#%E6%96%87%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>文件</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/9EA9FB10AB81276E2D7F5039A85863B6.PNG\" alt=\"Slide1\"></p>\n<p>文件，应该是云存储看起来比较直观的存储形式了。在这里，我关注的有三个要素。</p>\n<p>一，是能够快速便捷的访问。如果你不能随存随用，那么这个云存储带给你的体验感会大幅度下降。也即要求你访问网盘的直连速度充足。</p>\n<p>二，是容量足够。它没必要是一个超巨大的网盘，只需要满足你的需求即可，定时整理归档文件也是很重要的。</p>\n<p>三，是真实的存储容量。相比百度云，微云之类的超大云盘，我更推荐使用固定有限的容量。因为它是真实拷贝一份数据到云端，而不是多存一个哈希值。</p>\n<p>在这里，我的日常使用的网盘有两个，其一是 OneDrive，我有30G的固定配额+1T的Office 365空间，光是前者就满足了我的需要了，它作为我多文件存储访问的桥梁，链接着我不同的设备，比如我在 PC 设备上写好了一份文件能够在 iPad 上读取并快速展示。其二，是坚果云，这里我仅使用免费账户，主要是使用其中的 WebDAV 协议同步很多应用的数据，比如 Keepass 的密码库和 Zotero 的文件。</p>\n<h3 id=\"邮箱联系人待办事项日历事件\"><a href=\"#%E9%82%AE%E7%AE%B1%E8%81%94%E7%B3%BB%E4%BA%BA%E5%BE%85%E5%8A%9E%E4%BA%8B%E9%A1%B9%E6%97%A5%E5%8E%86%E4%BA%8B%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>邮箱/联系人/待办事项/日历事件</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/B4C0CD1F65B0636F9F7254EEF4DF9575.PNG\" alt=\"Slide2\"></p>\n<p>「Microsoft Exchange ActiveSync」是我现在使用的服务，直白点来说，其实就是注册了一个微软账号。</p>\n<p>在 Windows 设备中，当我登陆了我的微软账号，它会同时登陆了 Mail、People、To Do、Calendar 这四个应用，你可以正常的收发邮件，管理你的 GTD 流程。</p>\n<p>同时在你的移动设备，Android / iOS 你也可以相应得添加账号，以 iOS 为例，你可以在 Mail、Contacts、Reminders、Calendar 找到对应的数据。安卓系统上可能会根据不同的系统有不同的情况，这里就不阐述了，Android 是原生支持这个服务的。</p>\n<p>更重要的时候，数据本身是保存在云端数据库中的，无论哪天手机被盗/丢失/损坏，也不会丢失珍贵的联系人，包括联系人头像（这个我很喜欢）。服务本身是双向同步的，在任意一台设备上更新了数据，都会同步到其他所有的数据中，十分方便。我的整个 GTD 流程都是依托这服务展开的，轻量够用~</p>\n<h3 id=\"照片存储和分享\"><a href=\"#%E7%85%A7%E7%89%87%E5%AD%98%E5%82%A8%E5%92%8C%E5%88%86%E4%BA%AB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>照片存储和分享</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/E7576D11E3C6CE8FF7DA3F1D3968E11D.PNG\" alt=\"9EA9FB10AB81276E2D7F5039A85863B6\"></p>\n<p>照片应该是我们当今生活中产生的最大量的数据信息了。每个人都会或多或少的积累照片，而且会因为历史进程的推进而不断增大。无论它是一张美丽的风景照片，还是一个屏幕截图，都代表着背后你的一段回忆。比如，我很喜欢我初三的那个课室的那个座位的照片，可能它平平无奇，但是它印证着我人生思想的一个蜕变。</p>\n<p>「Google Photos」是一个如今比较优秀的在线图片存储服务。它提供有限压缩的无限存储，付费可升级无压缩无限存储。对我而言，保存下来照片背后的那一刻回忆，比起一味追求高画质要重要得多。它同时提供了 Web端/iOS平台/Android平台三个客户端，它在多设备后台同步是无感的，也就是当你突然想起来某张照片你可以随时在任一设备访问，无论当时用哪一台移动设备拍摄的。一次共同出游，上传照片后也能建立相册快捷分享。在国内，也有一个类似的服务叫「一刻相册」，是百度技术团队出品。</p>\n<p>这里，我还想补充一点，照片需要定时整理，否则照片一多在巨大的信息流里寻找一张特定的照片，是很困难的。在这种大规模的图片服务，绝对不要将个人隐私照片上传，既是为了自己好也是为别人好。软件代码是人写的，难免会有出错的时候。我身边有不少人贪图方便全量同步，这是只要使用 iOS 相册的隐藏相册功能就不会被同步到云端喔。</p>\n<h3 id=\"手写笔记电子笔记\"><a href=\"#%E6%89%8B%E5%86%99%E7%AC%94%E8%AE%B0%E7%94%B5%E5%AD%90%E7%AC%94%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>手写笔记/电子笔记</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/CD7F7A143D6E68C825DAD7318DCC38FD.PNG\"></p>\n<p>笔记分为两种，一种是手写式电子笔记，一种是富文本电子笔记。</p>\n<p>对于手写式电子笔记，我常用的是 Notability。原因无它，因为它支持第三方云存储，我一般将它和 OneDrive 存储连接起来，可以很轻松的在 PC 上访问我在 iPad 中记录的课堂笔记，在快速复习的时候很有用。存储形式我选择的是 PDF + Recording。</p>\n<p>另一方面，富文本电子笔记，我从 OneNote 转到 印象笔记，目前在用的是 Notion。对于高校用户，Notion免费提供了无限Block的存储，它提供了很多新的功能特性比如Database。电子笔记领域近两年涌现了不少新兴之秀，除了上述三个还有语雀、Coda、为知笔记、有道云笔记等。我个人试用过后选定的Notion，少数派有不少 Notion 的文章，推荐你去阅读了解一下。在这里，我建议的是，试用并选择够用的就好。</p>\n<h3 id=\"代码个人博客个人网站\"><a href=\"#%E4%BB%A3%E7%A0%81%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>代码/个人博客/个人网站</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/DE1EF9EB021ABBCB65660C30E147FA12.PNG\"></p>\n<p>代码库方面，我相信绝大部分人的选择都是 Github。它除了能存储代码还能作为一个优秀的静态网站展示一些内容，比较大众的使用方式是 个人博客、个人网站和开发文档等。</p>\n<p>代码库方面，我有几点比较推荐的。</p>\n<p>第一点是只保存自己需要的代码。它可以是你自己产生的代码，也可以是Fork后修改的代码，但不会是不断Fork的纯拷贝，你既不会阅读又增加了自己的检索的时间，还会使得面试官错误认为你热衷抄代码。</p>\n<p>第二点是优化项目结构，只上传有用的信息。很多 IDE 生成的信息用 <code class=\"language-text\">.gitignore</code>过滤掉会使你的代码仓库更简洁，增加一个README说明页面哪怕只是一个短短几句，都能让你的仓库显得更大气更实用。</p>\n<p>第三点是巧用分支和管理commit记录。每一个分支都有其特定的功能需求，分别进行开发和测试会更高效；而巧妙得拆分commit和合并commit也是很重要的，而不是稍微改两个字符也产生一个commit。</p>\n<p>对于静态个人博客方面，我个人推荐 docsify，它能够让你的文件结构十分整洁，所有的文件都是有用的信息而非因为使用了某一框架增添了很多索引文件。而且，它本身支持 Markdown ，非常适合博客的书写。有兴趣的可以阅读这篇文章：<a href=\"https://sspai.com/post/55786\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">个人博客的方案推荐，你只负责编写</a></p>\n<h3 id=\"密码管理和同步\"><a href=\"#%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%92%8C%E5%90%8C%E6%AD%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>密码管理和同步</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/ACECFBFBF0B16921BB4ACECC44EF7C95.PNG\"></p>\n<p>密码管理，是我认为在生物认证技术没有普及之前是十分有必要的。现在我们使用的互联网服务越来越多，每一个都需要你有独立的账号密码，一般人是无法记忆如此多的密码的。而加密技术趋于同质化，操作运营的服务商的能力水平却并不都在统一高水准。一旦发生密码泄露，是一件很可怕的事情。</p>\n<p>现在比较流行的密码管理器是 1Password、Lasspass 等。我个人选择的是 Keepass 这一比较小众的无服务商服务。通过简单的搭建，你可以自由的掌握密码库、密钥、密码等多个重要的东西，而且数据也是保存在你自己指定的地方。加密方式是现代的最高标准，而且开源有保证。</p>\n<p>有兴趣的可以阅读这篇文章：<a href=\"https://sspai.com/post/55403\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">一次解决 5 个痛点，我搭建了一套免费且科学的密码管理方案</a></p>\n<h3 id=\"思维导图文献管理和同步\"><a href=\"#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%92%8C%E5%90%8C%E6%AD%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>思维导图/文献管理和同步</h3>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/8037D0B2E00457884697A3763D63759D.PNG\"></p>\n<p>思维导图是我在日常工作学习中使用得比较频繁的工具。XMind 是一个良心的软件，它允许你一直无限期试用该产品，除了一些高级功能需要订阅。在电脑端可以使用 XMind Zen，它独有的禅模式能让你沉浸式地发散思维，完成结构后稍加美化，将文件保存在 OneDrive 的同步目录中；在 iPad 可以下载 XMind 的应用，它支持访问文件app直接打开 OneDrive 上的文件，这样就能高效地跟老板 Meeting 整体的结构了。</p>\n<p>文献管理也是研究生活中重要的一部分。在试用了Zotero、Endnote、Mendeley 这三款软件后，我的最终选择是 Zotero 。它也能够自定义存储位置，而不是强制性的使用服务商的云存储，因此将所有的文献存储在 OneDrive 上就是我的需求，尤其是那些经过自己的阅读有了大量的专属标注的PDF文件。后面有时间我会专门讲讲文献管理这一topic。</p>\n<h3 id=\"聊天记录\"><a href=\"#%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>聊天记录</h3>\n<p>最后，这可能是我至今还没有满意解决的数据。聊天记录承载着我们很多美好的对话，那些难忘的、动人的情话，那些激动的、开心的分享，都一点一滴地记录在聊天软件中。然而，目前绝大多数的 IM 都不具备体验良好的导出功能。</p>\n<p>以微信为例。目前我的方案是一年一次的归档整理。一般我会保存两份数据，一份是全量备份，包括所有我认为有用的对话，另一份是重点备份，仅包括我认为有意义的珍惜的对话。然后，通过微信桌面客户端的备份功能导出为单一文件，保存到云端。</p>\n<p>但我还是很希望它能够像云端照片一样，随时能够访问得到，在我思念的时候搜索并定位得到。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>从上面的方案你可以很容易的发现一些共通点，找一款趁手的云存储网盘，尽可能使用文件形式的存储和通用的协议。那么，你就可以像我一样，就算任一设备被掰成了两截，我的数据也不会受到任何的损失。这种安心感和使用中不需要传输的高效感，能使你的工作生活的幸福感大大提高。</p>\n<p>祝大家都能找到合适自己的方案~</p>\n"}},{"node":{"title":"Chrome在Windows找回熟悉的Alt + Num切换标签页","path":"/2019/11/24/alt-num-switch-tab-in-chrome-on-windows/","date":"24. November 2019","timeToRead":1,"description":"使用Alt+Num在Chrome浏览器中切换标签页，统一多平台的体验","content":"<p>在不同的系统和软件中，我都喜欢尽可能用同一套快捷键方案去完成相同的功能，以减少自己的学习和记忆成本，最大化效率。但是，哪怕是同一个应用，由于不同平台的默认快捷键不一样，频繁切换平台的迁移学习也很辛苦。</p>\n<p>比如 Chrome 浏览器中，切换标签页的方式在不同的平台上不一样：</p>\n<ul>\n<li>Windows：Ctrl + Num</li>\n<li>Linux：Alt + Num</li>\n<li>Mac：Cmd + Num</li>\n</ul>\n<p>后两者由于键位所处的位置大致相同，所以哪怕没有记忆也不会造成多大的割裂感。但是，Windows 下面的这套快捷键实在是太难受了，本文就是教你如何找回熟悉的感觉。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/FF5B74693EE093B3A0810E93810F336D.png\" alt=\"FF5B74693EE093B3A0810E93810F336D\"></p>\n<p>这里我们需要借助的软件是 Vimium，相信已经有不少文章介绍过它了。在这里我们需要用到它 Custom key mappings 的功能。Vimium 本身提供很多优秀的内建功能。而我们这里需要用到的是 <code class=\"language-text\">firstTab</code> 的功能。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/72B87484BA371209846EF02C6B381FE9.png\" alt=\"72B87484BA371209846EF02C6B381FE9\"></p>\n<p>你可能会觉得这个功能并不足够完成 <code class=\"language-text\">Alt + 2</code>或 <code class=\"language-text\">Alt + 3</code> 等映射，其实不然，仔细阅读它的开源代码你会发现它本身还提供 option 的功能，简单点来说配置方案是酱紫的。</p>\n<p><img src=\"http://wsine.cn-gd.ufileos.com/image/939C6CA558E0E7230390D3763ED98731.png\" alt=\"939C6CA558E0E7230390D3763ED98731\"></p>\n<p>这里我把映射也一并附上。我个人只习惯用前面几个固定的标签页，你可以根据自己习惯增减。</p>\n<pre class=\"language-text\"><code class=\"language-text\">map &lt;a-1&gt; firstTab\nmap &lt;a-2&gt; firstTab count=2\nmap &lt;a-3&gt; firstTab count=3\nmap &lt;a-4&gt; firstTab count=4</code></pre>\n<p>有了这套方案，我可以很容易的快速回到长期放在第一个标签的 Gmail 页面或者从 Jupyter Notebook 的编程页面中跳出去快速搜索一些东西，而不用借助鼠标，从而提高效率。</p>\n"}},{"node":{"title":"我的Vim配置","path":"/2019/07/23/my-vim-configuration/","date":"23. July 2019","timeToRead":6,"description":"今天来分享一下我对于Vim的一下配置和心得","content":"<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>前言</h2>\n<h4 id=\"为什么选择vim？\"><a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9vim%EF%BC%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>为什么选择vim？</h4>\n<p>曾经我也是一个小白，使用Dev-C++来学习C++语言，使用Visual Studio开发工程，它们都被称为IDE(Integrated development environment)。但是，逐渐的，我渐渐意识到，你只能遵循它制定的一系列的流程来开发程序，自定义程度不高，而且大型的IDE消耗计算资源严重。</p>\n<p>后来，我认识到了编辑和编译应该是一个分开的过程，便转战到了文本编辑器，选择Sublime Text。Sublime优秀的UI界面，优秀的快捷键，拥有插件系统，着实让我着迷。它的初始环境便可直接上手，它的默认配色Monokai让人看得很舒服。</p>\n<p>但是，离开Sublime选择Vim的原因有三点，一是Sublime依赖于图形化界面，二是Sublime移动光标需要移动右手使用方向键，三是Sublime编辑远程文件要么借助工具要么经常传输。至此，我终于理解了那个古老的梗。</p>\n<blockquote>\n<p> 世界上只有三种程序员，一种是使用Vim的，一种是使用Emacs的，还有一种是其他</p>\n</blockquote>\n<p>而这篇博文也是放置于效率分类下</p>\n<p><em>加个小彩蛋：</em>我实验室的Boss爱用Emacs，我们互视为异教徒，我说“你的手指会变形的”，他说“程序员谁的手指不变形”，我“......[冷漠]”</p>\n<h4 id=\"如何学习vim\"><a href=\"#%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0vim\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>如何学习Vim</h4>\n<p>我的观点是，自己一行一行写自己的配置文件才会深入学会Vim。如果一开始就用配置好的，那和直接使用IDE没有太大的差别。知道配置文件每一行干了些什么，不懂就搜，想加功能想改功能就动手，最后这就是一份<strong>你的配置文件</strong>。相信每个Vim大牛都是这样做的。同样的，我的Vim配置也会不断更新，可能会持续n年也不一定。而这也是为什么我的文章标题起名如此。</p>\n<h2 id=\"原则\"><a href=\"#%E5%8E%9F%E5%88%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>原则</h2>\n<p>我的Vim配置有一定的原则，遵循原则才会让配置不会超出自己的控制</p>\n<ol>\n<li>插件能用轻量级的就不用复杂的</li>\n<li>非需要的功能不会添加</li>\n<li>尽量消耗更少的资源</li>\n<li>配色一定不能忍</li>\n<li>尽可能的做到一键配置</li>\n</ol>\n<h2 id=\"正文\"><a href=\"#%E6%AD%A3%E6%96%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>正文</h2>\n<h4 id=\"配色\"><a href=\"#%E9%85%8D%E8%89%B2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>配色</h4>\n<p>说得多还不如先看看总体的配色，配色我采用了vim自带的desert主题，在这个基础上加了一点自定义</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image494.png\" alt=\"配色图\"></p>\n<p>从左往右说起好了，左侧我添加了一个目录树，使用的是<code class=\"language-text\">scrooloose/nerdtree</code>的插件，并且绑定了<code class=\"language-text\">&lt;leader&gt;q</code>来启动和隐藏目录树，使用起来还是蛮方便的</p>\n<p>中间的配色我刻意挑了一个黑色的主题。我不喜欢那种惨淡的白色，函数名和命名空间是白色就和变量名看起来没有区分度了，因此搜了好久，找到了<code class=\"language-text\">octol/vim-cpp-enhanced-highlight</code>插件能满足这个需求，修改了一下它的颜色。弹出菜单的颜色我也自己修改了。颜色都采用了暗色调的color，确保不会刺眼，同时也能将不同的元素区分出来。<code class=\"language-text\">set t_Co=256 &quot; Enable status bar color</code>很重要。</p>\n<p>顶部和底部采用的是比较出名的<code class=\"language-text\">vim-airline/vim-airline</code>插件，以及其相应的<code class=\"language-text\">vim-airline/vim-airline-themes</code>，主题我选择了<code class=\"language-text\">let g:airline_theme=&#39;luna&#39;</code>，并且启用了powerline字体，也就是你能看到的三角形符号</p>\n<p>因为还在不断的修改中，未来可能会考虑把配色做成插件易于安装吧，目前的安装方式比较麻烦</p>\n<h4 id=\"管理\"><a href=\"#%E7%AE%A1%E7%90%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>管理</h4>\n<p>插件管理上我选用了Vundle，目前一款比较流行的Vim插件管理器，基本上我只使用github上的vim插件</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image495.png\" alt=\"插件列表\"></p>\n<h4 id=\"按键\"><a href=\"#%E6%8C%89%E9%94%AE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>按键</h4>\n<p>一直以来我对于那种秀配置不讲按键绑定的文章比较反感，除非你一个键都没改</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">模式</th>\n<th align=\"center\">按键</th>\n<th align=\"center\">映射</th>\n<th>功能</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">全局</td>\n<td align=\"center\"><code class=\"language-text\">,</code></td>\n<td align=\"center\"><code class=\"language-text\">leader</code></td>\n<td><code class=\"language-text\">&lt;leader&gt;</code></td>\n<td>leader键是vim中的一个特殊键</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">j</code></td>\n<td align=\"center\"><code class=\"language-text\">gj</code></td>\n<td>下一行</td>\n<td>视觉上往下移动(行太长导致分行时)</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">k</code></td>\n<td align=\"center\"><code class=\"language-text\">gk</code></td>\n<td>上一行</td>\n<td>视觉上往上移动(行太长导致分行时)</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">&lt;leader&gt;w</code></td>\n<td align=\"center\"><code class=\"language-text\">:w&lt;CR&gt;</code></td>\n<td>快速保存</td>\n<td>没有权限保存的时候也是不行的</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">&lt;leader&gt;q</code></td>\n<td align=\"center\"><code class=\"language-text\">:bd&lt;CR&gt;:q&lt;CR&gt;</code></td>\n<td>快速退出</td>\n<td>前提所有buffer都保存了，防止意外</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">K</code></td>\n<td align=\"center\"><code class=\"language-text\">:bnext&lt;CR&gt;</code></td>\n<td>切换到右边的buffer</td>\n<td>仿照Vimuim的标签切换</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">J</code></td>\n<td align=\"center\"><code class=\"language-text\">:bprevious&lt;CR&gt;</code></td>\n<td>切换到左边的buffer</td>\n<td>仿照Vimuim的标签切换</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">&lt;leader&gt;bn</code></td>\n<td align=\"center\"><code class=\"language-text\">:enew&lt;CR&gt;</code></td>\n<td>新开一个buffer</td>\n<td>buffer new</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">&lt;leader&gt;bd</code></td>\n<td align=\"center\"><code class=\"language-text\">:bd&lt;CR&gt;</code></td>\n<td>关闭当前buffer</td>\n<td>buffer delete</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">空格键</code></td>\n<td align=\"center\"><code class=\"language-text\">smooth_scroll</code></td>\n<td>向下平滑滚动</td>\n<td>避免思维跳跃，仿照Chrome的设定</td>\n</tr>\n<tr>\n<td align=\"center\">正常</td>\n<td align=\"center\"><code class=\"language-text\">减号键</code></td>\n<td align=\"center\"><code class=\"language-text\">smooth_scroll</code></td>\n<td>向上平滑滚动</td>\n<td>避免思维跳跃</td>\n</tr>\n<tr>\n<td align=\"center\">编辑</td>\n<td align=\"center\"><code class=\"language-text\">Ctrl + b</code></td>\n<td align=\"center\"><code class=\"language-text\">方向键-左</code></td>\n<td>向左移动一个字符</td>\n<td>仿照Bash的控制方式</td>\n</tr>\n<tr>\n<td align=\"center\">编辑</td>\n<td align=\"center\"><code class=\"language-text\">Ctrl + f</code></td>\n<td align=\"center\"><code class=\"language-text\">方向键-右</code></td>\n<td>向右移动一个字符</td>\n<td>仿照Bash的控制方式</td>\n</tr>\n<tr>\n<td align=\"center\">编辑</td>\n<td align=\"center\"><code class=\"language-text\">Ctrl + e</code></td>\n<td align=\"center\"><code class=\"language-text\">Home键</code></td>\n<td>跳到行首</td>\n<td>仿照Bash的控制方式</td>\n</tr>\n<tr>\n<td align=\"center\">编辑</td>\n<td align=\"center\"><code class=\"language-text\">Ctrl + a</code></td>\n<td align=\"center\"><code class=\"language-text\">End键</code></td>\n<td>跳到行尾</td>\n<td>仿照Bash的控制方式</td>\n</tr>\n<tr>\n<td align=\"center\">编辑</td>\n<td align=\"center\"><code class=\"language-text\">Tab键</code></td>\n<td align=\"center\"><code class=\"language-text\">方向键-下</code></td>\n<td>选择下一个候选词</td>\n<td>可连续按</td>\n</tr>\n<tr>\n<td align=\"center\">编辑</td>\n<td align=\"center\"><code class=\"language-text\">Esc键</code></td>\n<td align=\"center\"><code class=\"language-text\">Ctrl + 回车</code></td>\n<td>清除菜单</td>\n<td>无</td>\n</tr>\n<tr>\n<td align=\"center\">可视化</td>\n<td align=\"center\"><code class=\"language-text\">//</code></td>\n<td align=\"center\"><code class=\"language-text\">y/&lt;C-R&gt;&quot;&lt;CR&gt;</code></td>\n<td>快速搜索</td>\n<td>需要先选择内容</td>\n</tr>\n</tbody>\n</table>\n<p>其实可以看出我是比较喜欢统一各大软件的按键方式的，主要是可以让自己不用记忆太多，快捷键是效率的主要生产力，所以终端、编辑器、浏览器这三大离不开的软件，我都会尽可能地去统一它们的按键</p>\n<p>上面提到的平滑滚动我使用了<code class=\"language-text\">lucasicf/vim-smooth-scroll</code>的插件，其实这个插件来自出名的<code class=\"language-text\">terryma</code>之手，但是如果连续平滑滚动，会连续触发导致控制卡死。而<code class=\"language-text\">lucasicf</code>修复了这个bug并发送了PR，不知道为什么<code class=\"language-text\">terryma</code>大神一直没有理=。=</p>\n<p>还有，我想要仿照Chrome使用Shift + 空格键来平滑向上滚动，然后我尝试了很多种方法，并不能捕获<code class=\"language-text\">Shift + Space</code>的状态，如果有大神能做到求教</p>\n<h4 id=\"括号匹配\"><a href=\"#%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>括号匹配</h4>\n<p>Vim毕竟是写代码的利器，自动补全括号特别实用且重要，这里我简单的使用了一个插件<code class=\"language-text\">jiangmiao/auto-pairs</code></p>\n<h4 id=\"多光标编辑\"><a href=\"#%E5%A4%9A%E5%85%89%E6%A0%87%E7%BC%96%E8%BE%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>多光标编辑</h4>\n<p>在Sublime中唯一让我留念的就是多光标编辑了，作为被这个装逼大法宠坏的我，没有它感觉断了一臂。多亏了terryma大神将这一功能移植到了vim中，据说，这还是大神在一次航班途中写出来的，我只能打出666并默默地比了一个❤~</p>\n<p>插件名称<code class=\"language-text\">terryma/vim-multiple-cursors</code>。在Visual模式下选中所需要改的内容，按Ctrl + n可以选中下一个，然后按下c进入编辑状态，编辑完，Esc，完美</p>\n<h4 id=\"快速打开文件\"><a href=\"#%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>快速打开文件</h4>\n<p>Sublime还有一个功能是Ctrl + p可以打开文件，这一方式同样也有插件在vim中<code class=\"language-text\">ctrlpvim/ctrlp.vim</code>。更重要的是，该插件同样支持模糊搜索。</p>\n<h4 id=\"快速注释\"><a href=\"#%E5%BF%AB%E9%80%9F%E6%B3%A8%E9%87%8A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>快速注释</h4>\n<p><code class=\"language-text\">scrooloose/nerdcommenter</code>是一个优秀的插件，默认的注释方式是<code class=\"language-text\">&lt;leader&gt;c&lt;Space&gt;</code>，可以在注释和非注释直接切换。同时，配合Ctrl + v的块选择，能够快速选中自己想要注释的行，然后<code class=\"language-text\">&lt;leader&gt;c&lt;Space&gt;</code>快速批量注释</p>\n<h4 id=\"自动补全\"><a href=\"#%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>自动补全</h4>\n<p>在自动补全的领域下，最好的无疑是<code class=\"language-text\">YouCompleteMe</code>插件了，然而我并没有使用。首先该插件的调用程序太多，消耗资源太多，安装也麻烦，一次安装终身受用这种借口不能作为不简化安装的理由。其次，语义化补全对我来说没有太大的需求，只需要能把变量和函数提示并补全就好了</p>\n<p>而Vim在新版中已经原生添加了自动补全的功能。利用按下Ctrl + x, Ctrl + o触发， Ctrl + n, Ctrl + p选择菜单。但是这样未免太麻烦不优雅，我利用了一款插件<code class=\"language-text\">vim-scripts/AutoComplPop</code>，它能够自动弹出补全菜单，使用起来效果还不错。不过它偶尔有一些小bug，我自己还能忍，如果你不喜欢再寻求一款更好的自动补全吧</p>\n<h4 id=\"格式控制\"><a href=\"#%E6%A0%BC%E5%BC%8F%E6%8E%A7%E5%88%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>格式控制</h4>\n<p>在格式控制的范畴下，我将制表符都转义成了空格，并且在保存的时候自动把行尾的空格都去掉了，这是符合优秀编码规范的格式，希望还是能保持。</p>\n<p>有一点，很多人没注意到的，Git管理的文件建议保留文件末尾的一个空行，特意提一下，我没有加入到vim自动添加空行，因为不是所有的文件都被Git管理，无端的空行可能会导致一些未知的错误。所有建议手动添加。</p>\n<h4 id=\"其他\"><a href=\"#%E5%85%B6%E4%BB%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>其他</h4>\n<p>假设你都理解了vim的基础操作，其他的一些配置我也有相应的注释，参考了<a href=\"http://amix.dk/vim/vimrc.html%EF%BC%8C%E4%B8%8D%E6%84%A7%E6%98%AF%E8%A2%AB%E8%AA%89%E4%B8%BA%E6%95%99%E7%A7%91%E4%B9%A6%E8%88%AC%E7%9A%84vim%E9%85%8D%E7%BD%AE%EF%BC%8C%E7%9C%9F%E6%98%AF%E4%BC%98%E7%A7%80%E3%80%82\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://amix.dk/vim/vimrc.html，不愧是被誉为教科书般的vim配置，真是优秀。</a></p>\n<p>阅读.vimrc文件，能开拓你很多的思路，希望能找到你喜欢的</p>\n<h2 id=\"安装\"><a href=\"#%E5%AE%89%E8%A3%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>安装</h2>\n<p>参照<a href=\"https://github.com/VundleVim/Vundle.vim%EF%BC%8C%E4%B8%8B%E8%BD%BDVundle%E7%AE%A1%E7%90%86%E5%99%A8%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/VundleVim/Vundle.vim，下载Vundle管理器到指定目录</a></p>\n<p>将对应的文件放置在你的家目录<code class=\"language-text\">~</code>下</p>\n<pre class=\"language-text\"><code class=\"language-text\">~\n├── .vimrc\n└── .vim\n     ├── bundle\n     │   └── Vundle.vim\n     └── colors\n         └── desert.vim</code></pre>\n<p><a href=\"https://github.com/Wsine/Backup/blob/master/vim/.vimrc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.vimrc文件下载</a>\n<a href=\"https://github.com/Wsine/Backup/blob/master/vim/desert.vim\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">desert.vim文件下载</a></p>\n<p>打开Vim，使用<code class=\"language-text\">:PluginInstall</code>即可</p>\n<h2 id=\"配置文件\"><a href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>配置文件</h2>\n<pre class=\"language-text\"><code class=\"language-text\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Vundle\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\nset nocompatible              &quot; be iMproved, required\nfiletype off                  &quot; required\n\n&quot; set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\n&quot; let Vundle manage Vundle, required\nPlugin &#39;VundleVim/Vundle.vim&#39;\n\nPlugin &#39;jiangmiao/auto-pairs&#39;\nPlugin &#39;scrooloose/nerdtree&#39;\nPlugin &#39;ctrlpvim/ctrlp.vim&#39;\n&quot; Plugin &#39;terryma/vim-smooth-scroll&#39;\nPlugin &#39;lucasicf/vim-smooth-scroll&#39;\nPlugin &#39;vim-scripts/AutoComplPop&#39;\nPlugin &#39;terryma/vim-multiple-cursors&#39;\nPlugin &#39;scrooloose/nerdcommenter&#39;\nPlugin &#39;vim-airline/vim-airline&#39;\nPlugin &#39;vim-airline/vim-airline-themes&#39;\nPlugin &#39;octol/vim-cpp-enhanced-highlight&#39;\nPlugin &#39;vim-python/python-syntax&#39;\n&quot; All of your Plugins must be added before the following line\ncall vundle#end()            &quot; required\nfiletype plugin indent on    &quot; required\n&quot; Put your non-Plugin stuff after this line\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; General\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Sets how many lines of history VIM has to remember\nset history=700\n\n&quot; Set to auto read when a file is changed from the outside\nset autoread\n\n&quot; ignore case when searching unless exists one upper case\nset ignorecase\nset smartcase\n\n&quot; Realtime searching\nset incsearch\n\n&quot; hight light searching\nset hlsearch\n\n&quot; No annoying sound on errors\nset noerrorbells\nset novisualbell\nset t_vb=\nset tm=500\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; VIM user interface\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Set 7 lines to the cursor - when moving vertically using j/k\nset so=7\n\n&quot; Turn on the WiLd menu\nset wildmenu\n\n&quot; Ignore compiled files\nset wildignore=*.o,*~,*.pyc\n\n&quot;Always show number\nset number\n\n&quot;Always show current position\nset ruler\n\n&quot; Height of the command bar\nset cmdheight=2\n\n&quot; A buffer becomes hidden when it is abandoned\nset hid\n\n&quot; Configure backspace so it acts as it should act\nset backspace=eol,start,indent\nset whichwrap+=&lt;,&gt;,h,l\n\n&quot; Set cmd show\nset showcmd\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Colors and Fonts\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Enable syntax highlighting\nsyntax enable\n\n&quot; Set colorscheme\nset background=dark\ncolorscheme desert\n\n&quot; Set utf8 as standard encoding and en_US as the standard language\nset encoding=utf8\n\n&quot; Use Unix as the standard file type\nset ffs=unix,dos,mac\n\n&quot; Enable status bar color\nset t_Co=256\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Files, backups and undo\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Turn backup off, since most stuff is in SVN, git et.c anyway...\nset nobackup\nset nowb\nset noswapfile\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Text, tab and indent related\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Use spaces instead of tabs\nset expandtab\n\n&quot; Be smart when using tabs ;)\nset smarttab\n\n&quot; 1 tab == 4 spaces\nset shiftwidth=4\nset tabstop=4\n\n&quot; Linebreak on 500 characters\nset lbr\nset tw=500\n\n&quot; Intelligence indent\nset ai &quot;Auto indent\nset si &quot;Smart indent\nset wrap &quot;Wrap lines\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Moving around, tabs, windows and buffers\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Return to last edit position when opening files (You want this!)\nautocmd BufReadPost *\n     \\ if line(&quot;&#39;\\&quot;&quot;) &gt; 0 &amp;&amp; line(&quot;&#39;\\&quot;&quot;) &lt;= line(&quot;$&quot;) |\n     \\   exe &quot;normal! g`\\&quot;&quot; |\n     \\ endif\n&quot; Remember info about open buffers on close\nset viminfo^=%\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Status line\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Always show the status line\nset laststatus=2\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Editing mappings\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; With a map leader it&#39;s possible to do extra key combinations\n&quot; like &lt;leader&gt;w saves the current file\nlet mapleader = &quot;,&quot;\nlet g:mapleader = &quot;,&quot;\n\n&quot; Toggle paste mode\nset pastetoggle=&lt;leader&gt;p\n\n&quot; Treat long lines as break lines (useful when moving around in them)\nmap j gj\nmap k gk\n\n&quot; Fast saving\nnmap &lt;leader&gt;w :w&lt;CR&gt;\n\n&quot; Fast quit\nnmap &lt;leader&gt;q :bufdo bd&lt;CR&gt;:q&lt;CR&gt;\n\n&quot; Fast open file tree\nmap &lt;leader&gt;t :NERDTreeToggle&lt;CR&gt;\n\n&quot; Fast Tab use\nnoremap &lt;silent&gt; K :bnext&lt;CR&gt;\nnoremap &lt;silent&gt; J :bprevious&lt;CR&gt;\nnoremap &lt;silent&gt; &lt;leader&gt;bn :enew&lt;CR&gt;\nnoremap &lt;silent&gt; &lt;expr&gt; &lt;leader&gt;bd\n    \\ len(filter(range(1, bufnr(&#39;$&#39;)), &#39;buflisted(v:val)&#39;)) &gt;= 2 ?\n    \\ &quot;:bp\\|bd #&lt;CR&gt;&quot; : &quot;:bd&lt;CR&gt;&quot;\n\n&quot; Smooth page scroll\nnnoremap &lt;silent&gt; = :call smooth_scroll#down(&amp;scroll, 25, 2)&lt;CR&gt;\nnnoremap &lt;silent&gt; - :call smooth_scroll#up(&amp;scroll, 25, 2)&lt;CR&gt;\nnnoremap &lt;silent&gt; &lt;Space&gt; :call smooth_scroll#down(&amp;scroll, 25, 2)&lt;CR&gt;\n\n&quot; Move in insert mode\nimap &lt;C-b&gt; &lt;Left&gt;\nimap &lt;C-f&gt; &lt;Right&gt;\nimap &lt;C-e&gt; &lt;End&gt;\nimap &lt;C-a&gt; &lt;Home&gt;\nimap &lt;M-f&gt; &lt;C-o&gt;w\nimap &lt;M-b&gt; &lt;C-o&gt;b\n\n&quot; Clear highlight color\nnnoremap &lt;Esc&gt; :noh&lt;Return&gt;&lt;Esc&gt;\nnnoremap &lt;Esc&gt;^[ &lt;Esc&gt;^[\n\n&quot; Popup menu select\ninoremap &lt;silent&gt; &lt;expr&gt; &lt;Tab&gt; pumvisible() ? &quot;\\&lt;Down&gt;&quot; : &quot;\\&lt;Tab&gt;&quot;\ninoremap &lt;silent&gt; &lt;expr&gt; &lt;ESC&gt; pumvisible() ? &quot;\\&lt;C-E&gt;&quot; : &quot;\\&lt;ESC&gt;&quot;\n\n&quot; Visual Mode Search\nvnoremap // y/&lt;C-R&gt;&quot;&lt;CR&gt;\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Function, Command\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; Delete trailing white space on save, useful for Python and CoffeeScript ;)\nfunc! DeleteTrailingWS()\n    exe &quot;normal mz&quot;\n    %s/\\s\\+$//ge\n    exe &quot;normal `z&quot;\nendfunc\nautocmd BufWrite * :call DeleteTrailingWS()\n\n&quot; Auto open file tree if enter a directory\nautocmd StdinReadPre * let s:std_in=1\nautocmd VimEnter * if argc() == 1 &amp;&amp; isdirectory(argv()[0]) &amp;&amp; !exists(&quot;s:std_in&quot;) | exe &#39;NERDTree&#39; argv()[0] | wincmd p | ene | endif\n\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; =&gt; Plugin Setting\n&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\n&quot; NERDcommenter\nlet g:NERDSpaceDelims=1\nlet g:NERDCommentEmptyLines=1\nlet g:NERDDefaultAlign=&#39;left&#39;\n\n&quot; Vim Airline themes\nlet g:airline_theme=&#39;luna&#39;\nlet g:airline_powerline_fonts=1\nlet g:airline#extensions#tabline#enabled=1\n\n&quot; Vim Cpp Highlight\nlet g:cpp_class_scope_highlight=1\nlet g:cpp_member_variable_highlight=1\nlet g:cpp_experimental_simple_template_highlight=1\nlet g:cpp_concepts_highlight=1\n\n&quot; Vim Python Highlight\nlet python_highlight_all=1</code></pre>\n"}},{"node":{"title":"个人博客的方案推荐，你只负责编写","path":"/2019/07/20/personal-blog-writting-solution/","date":"20. July 2019","timeToRead":2,"description":"基于Docsify的无配置无服务器博客方案","content":"<p>今天想要谈谈的是一套我在用的个人博客解决方案，它能带给我最大的便利。</p>\n<p>首先我想先插播一个讨论，为什么要写博客？从我上大学开始，我就喜欢上了写博客。这主要是受到了一位前辈说的话而引发的思考：“当你能够将你所学的有条理地写下来成为一篇文章，那么就证明你学会了。” 当我越是实践这一点，我就越能体会到 写与不写 两者之间的差异。</p>\n<p>以我的经历来揣测，大多数人的博客方案可能经历如下几个阶段：</p>\n<ul>\n<li>主流博客网站：需要考虑的因素就比较多，包括Markdown支持、CSS支持、Javascript支持等，更重要的是原始数据不能很容易地访问；</li>\n<li>私有博客服务器：维护VPS，维护域名，维护流量 是这一方案最大的成本；</li>\n<li>静态网页托管：<code class=\"language-text\">hexo</code>、<code class=\"language-text\">jekyll</code>、<code class=\"language-text\">pelican</code>都是比较主流的方案，但是对客户端本身比较依赖</li>\n</ul>\n<p>直到我遇到了<a href=\"https://docsify.js.org/#/zh-cn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docsify</a>，我更愿意将它称为第四阶段“动态生成网页托管”。</p>\n<h2 id=\"docsify是什么\"><a href=\"#docsify%E6%98%AF%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docsify是什么</h2>\n<p>官方的描述是这样子的：一个神奇的文档网站生成工具</p>\n<blockquote>\n<p>docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 <code class=\"language-text\">.md</code> 转成 <code class=\"language-text\">.html</code> 文件，所有转换工作都是在运行时进行。</p>\n<p>这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 <code class=\"language-text\">.html</code> 文件“污染” commit 记录，只需要创建一个 <code class=\"language-text\">index.html</code> 就可以开始写文档而且直接<a href=\"https://docsify.js.org/#/zh-cn/deploy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">部署在 GitHub Pages</a>。</p>\n</blockquote>\n<p>第一次看到这样的描述的时候，我就觉得它也很适合用来构建一个博客系统，事实证明确实如此。</p>\n<h2 id=\"docsify有什么\"><a href=\"#docsify%E6%9C%89%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docsify有什么</h2>\n<h3 id=\"markdown支持\"><a href=\"#markdown%E6%94%AF%E6%8C%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Markdown支持</h3>\n<p>在2019年写博客，几乎主流的选择都是使用 Markdown 标记性语言，它很轻量，能让关注在内容本身而不是调格式上。</p>\n<p>但是，Docsify 提供的 Markdown 是原生的美好的感觉，不需要你刻意遵循什么，想怎么写就怎么写的自由；相对的，Hexo 和 Jekyll 都需要遵循一些特殊的格式，比如 {{ 日期 }} 等。这是我很喜爱它的一点。</p>\n<p>官方内置的 Markdown 解析器是<a href=\"https://github.com/markedjs/marked\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">marked</a>，如果不喜欢还可以参考<a href=\"https://docsify.js.org/#/zh-cn/markdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">文档</a>来自定义。</p>\n<p>###CSS支持</p>\n<p>docsify 提供了内置的5款主题，分别 <code class=\"language-text\">vue.css buble.css dark.css pure.css dolphin.css</code>，我个人是比较喜欢绿色的主题的，所以选了还是默认的 vue.css 风格。另外，Github 上还有很多优秀的第三方主题可供选择。</p>\n<p>当然作为一个开放的系统，它也允许用户自定义，如果有兴趣，撸一个符合自己审美好看的主题也蛮不错的。</p>\n<p>详细的主题 Demo 可以看<a href=\"https://docsify.js.org/#/zh-cn/themes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>~</p>\n<h3 id=\"javascript支持\"><a href=\"#javascript%E6%94%AF%E6%8C%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Javascript支持</h3>\n<h4 id=\"流程图--序列图\"><a href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE--%E5%BA%8F%E5%88%97%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>流程图 &#x26; 序列图</h4>\n<p>有 js 的支持，对我来说意味着能够加入扩展 Markdown 语法，比如流程图、序列图等的支持。我很喜欢 <a href=\"https://typora.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typora</a> 这款 MD 编辑器，它自身加入了流程图和序列图等的支持，这对于技术博客来说还是很有用的一大功能。而借助 docsify 的插件系统，简单的配置了一下就能加入这些功能，然后就能做到桌面端编辑和网页端展示是完全一样的效果。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image490.jpg\" alt=\"sequence diagram\"></p>\n<h4 id=\"评论系统\"><a href=\"#%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>评论系统</h4>\n<p>docsify 官方支持 Disqus 和 Gitalk 两种评论系统，如果有需要的话也可以很轻易的配置。我个人是比较推荐使用 Gitalk 的，毕竟 Github 账号很多人都有。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image491.jpg\" alt=\"discuss\"></p>\n<p>还有其他很有用的一下功能官方都提供了，具体可以看这里的<a href=\"https://docsify.js.org/#/zh-cn/plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">插件列表</a>。如果需要实现一些特殊的功能也可以自定义，拥有可修改能力就感觉拥有一切一样，这感觉还是很美好的。</p>\n<h3 id=\"数据独立\"><a href=\"#%E6%95%B0%E6%8D%AE%E7%8B%AC%E7%AB%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>数据独立</h3>\n<p>这是我最喜欢也是最重要的一点，它不需要你像 Hexo 等系统一样，编写 md 文件，然后通过工具转化为 html 网页静态托管。在 docsify 你只需要专注编写 md 内容本身，保存的也是 md 文件本身，docsify 就会自己读取 md 文件然后渲染成网页展示。</p>\n<p>我认为这是一件很棒的事情，不用再过多的依赖工具本身，编写->部署->托管的三个步骤中，我只需要在意第一个步骤就好了。甚者，由于没有了中间文件，我能直接管理 md 源文件，也相当于一个很好的备份，将数据掌握在自己手中的感觉。</p>\n<p>你的整个目录将会很整洁，就像这样：</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── index.html\n├── p01.解决方案\n│   ├── Markdown标题格式化.md\n├── p02.效率之道\n│   ├── <span class=\"token number\">2019</span>年科学的复合密码管理策略.md\n│   ├── 一个5年工科生的软件解决方案与吐槽.md\n│   └── 我的Vim配置.md\n├── p03.生活随想\n│   └── 给大学新生学子的一个思考.md\n└── README.md</code></pre>\n<p>引入 docsify 后唯一增加的一份文件只是一个 index.html 而已，而你原来管理数据的方式还是完全没变化(๑•̀ㅂ•́)و✧</p>\n<h2 id=\"docsify缺什么\"><a href=\"#docsify%E7%BC%BA%E4%BB%80%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docsify缺什么</h2>\n<p>事实上，docsify 也不是完美的，它也有一些小缺点，但是我们可以通过自定义来修补它。</p>\n<h3 id=\"侧边栏目录\"><a href=\"#%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%9B%AE%E5%BD%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>侧边栏目录</h3>\n<p>由于 Web 技术本身的限制，docsify 想要读取你服务端的文件需要用户主动提供路径，否则随便就能读取文件，想想还是很可怕的。</p>\n<p>要想增加侧边栏显示目录，docsify 需要用户自行提供 <code class=\"language-text\">_sidebar.md</code> 文件，里面用 List 记录着你的目录结构。</p>\n<p>但是，很明显，你只想好好写文章，并不想管理这些部署的事情，每新增一篇文章都要同步修改一遍 <code class=\"language-text\">_sidebar.md</code> 文件，还是很麻烦的一件事情。因此，我想到了请一个佣人来帮我完成这件事情，那就是 <a href=\"https://travis-ci.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Travis CI</a>，一个比较流行的 Github 上的自动化部署服务。然后再花 30s 写一行脚本来生成这个目录。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> -mindepth <span class=\"token number\">2</span> -name <span class=\"token string\">\"*.md\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">'/'</span> <span class=\"token string\">'BEGIN {RS=\".md\"} {arr[<span class=\"token variable\">$2</span>]=arr[<span class=\"token variable\">$2</span>]\"<span class=\"token entity\" title=\"\\n\">\\n</span>    - [\"<span class=\"token variable\">$3</span>\"](/\"<span class=\"token variable\">$2</span>\"/\"<span class=\"token variable\">$3</span>\")\"} END { num = asorti(arr, indices); for (i=1; i&lt;=num; ++i) if (indices[i]) print \"- \"indices[i], arr[indices[i]]}'</span> <span class=\"token operator\">></span> _sidebar.md</code></pre>\n<p>具体如何配置 Travis CI 与 Github 之间的联动我这里就不放教程了，官网上有教程，也可以参考仓库里的这个配置：<a href=\"https://github.com/Wsine/blog/blob/master/.travis.yml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.travis.yml</a></p>\n<h3 id=\"目录折叠\"><a href=\"#%E7%9B%AE%E5%BD%95%E6%8A%98%E5%8F%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>目录折叠</h3>\n<p>这是一个在 docsify 的仓库 issue 中呼声比较高的一个功能，很遗憾这个功能现在还没有，所以就自己做一个吧。</p>\n<p>得益于 docsify 预留了接口给用户自定义插件，借助钩子（hook）的功能，就可以实现目录折叠，文档多了没有折叠功能，浏览起来还是很不方便的。具体的实现可以参考仓库里的这个文件：<a href=\"https://github.com/Wsine/blog/blob/master/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">index.html</a></p>\n<h2 id=\"我的写作流程\"><a href=\"#%E6%88%91%E7%9A%84%E5%86%99%E4%BD%9C%E6%B5%81%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>我的写作流程</h2>\n<p>首先我的写作工具其实有很多地方，我会用手机随时记录灵感，用 iPad 在咖啡厅稍微写点东西，用笔记本电脑在图书馆认认真真写文章，晚上在家里享受机械键盘的声音~~~；无论我用什么工具编写，写完后我都可以通过 Github 网页上传新建一份 md 文件到一个新分支上；借助 Github  的功能，我可以很好地和朋友一起协作；当终稿完成的时候，只需要发一个 Pull Request 合并到 master 分支上即可；这时候会触发 Travis CI 的自动化，帮我生成一个目录到 gh-pages 分支上；然后文章就展示到博客中了。</p>\n<p>如果要用一个流程图来表达会是这个样子的：</p>\n<pre class=\"language-flow\"><code class=\"language-flow\">st<span class=\"token operator\">=></span>start<span class=\"token operator\">:</span> 开始\ned<span class=\"token operator\">=></span>end<span class=\"token operator\">:</span> 结束\nwrite<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 写作\ncooperation<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 协作\nupload<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 上传\nmerge<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 合并到主分支\ngenerate<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 生成目录\ndeploy<span class=\"token operator\">=></span>operation<span class=\"token operator\">:</span> 发布\nlast<span class=\"token operator\">=></span>condition<span class=\"token operator\">:</span> 终稿？\n\nst<span class=\"token operator\">-</span><span class=\"token operator\">></span>write<span class=\"token operator\">-</span><span class=\"token operator\">></span>upload<span class=\"token operator\">-</span><span class=\"token operator\">></span>last\n<span class=\"token function\">last</span><span class=\"token punctuation\">(</span>yes<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>merge<span class=\"token operator\">-</span><span class=\"token operator\">></span>generate<span class=\"token operator\">-</span><span class=\"token operator\">></span>deploy<span class=\"token operator\">-</span><span class=\"token operator\">></span>ed\n<span class=\"token function\">last</span><span class=\"token punctuation\">(</span>no<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>cooperation<span class=\"token operator\">-</span><span class=\"token operator\">></span>upload</code></pre>\n<h3 id=\"样例demo\"><a href=\"#%E6%A0%B7%E4%BE%8Bdemo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>样例Demo</h3>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image492.jpg\" alt=\"Demo\"></p>\n<p>博客地址：<a href=\"https://wsine.github.io/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wsine.github.io/blog</a></p>\n<p>至此，正文部分就结束了，如果还有兴趣的话可以继续阅读下面的部分。docsify 是一块面向文档设计的工具，但是能做成什么取决于使用工具的人，它也不仅仅只能用于说明文档。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>实际上，我所经历的博客建站总共分为三个阶段，我也曾经不断摸索最后才找到最合适自己的方案。</p>\n<h3 id=\"主流博客网站\"><a href=\"#%E4%B8%BB%E6%B5%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>主流博客网站</h3>\n<p>我最开始的写作是在<a href=\"https://www.cnblogs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">博客园</a>平台上。它本身很不错，我最开始选择它的理由是相对小众，以及它的slogan<code class=\"language-text\">代码改变世界</code>很抓我的心，博文页完全没有广告阻挡正文，这些都是我选择它的初衷。</p>\n<p>还有两点我想说，可定制化的页面与可定制化的插件。我很喜欢其中的一款主题：<code class=\"language-text\">Less is more</code>，它基本完全没有样式，但正是如此才最方便地定制一个符合自己审美的CSS，能让写作更加充满动力。其次，博客园平台允许用户申请 JavaScript 权限，这就相当于你可以自由地动态改变页面的内容，比如增加官方不支持的 flowchart 、隐藏彩蛋、<del>删除页面广告(划掉)</del> 等。</p>\n<p>后来，它很早开始支持Markdown也是我喜欢它的一点之一。但是，正值移动端崛起，网站本身对移动端的适配不足且我自定义了UI加大了难度，哪怕我辛苦得做了一版本移动端适配，效果也只是差强人意。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image493.png\" alt=\"Old\"></p>\n<h3 id=\"私有博客平台\"><a href=\"#%E7%A7%81%E6%9C%89%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>私有博客平台</h3>\n<p>我花了一年的时间折腾在Azure上面搭建了自己的博客平台，我很享受这个过程，完全自定义的过程也能让我学到很多。从购买域名，选择技术栈，搭建测试，维护数据库等，这些其实都是无与伦比的经验。专业相关的也建议折腾一番。</p>\n<h3 id=\"静态网页托管\"><a href=\"#%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%89%98%E7%AE%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>静态网页托管</h3>\n<p>我尝试过用Github Page托管<code class=\"language-text\">pelican</code>构建的静态博客，我选的主题很简洁，也能做到clone即可运行，最低的依赖仅仅是python运行环境，不需要安装package。</p>\n<p>好了，回应初心，要不要写博客？我认为是一件值得思考的事情，如果你在犹豫，不妨先写一篇看看~</p>\n"}},{"node":{"title":"2019年科学且免费的复合密码管理策略","path":"/2019/06/26/2019-scientific-overlapping-password-policy/","date":"26. June 2019","timeToRead":2,"description":"基于Keepass的多平台密码管理方案","content":"<p>[TOC]</p>\n<h2 id=\"前言\"><a href=\"#%E5%89%8D%E8%A8%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>前言</h2>\n<p>今天想要谈谈的是一套我在用的密码管理方案，我认为还是比较安全又易用的。</p>\n<p>回想一下，大多数人的密码管理策略可能有如下几个：</p>\n<ol>\n<li>纯大脑记忆所有的密码</li>\n<li>几乎使用一套密码来注册所有网站</li>\n<li>分重要等级用几套密码来注册所有网站</li>\n<li>使用记忆因子，实时大脑计算出正确密码</li>\n<li>使用流行的密码管理工具，如1password、Lastpass、Keychain等</li>\n</ol>\n<p>第一种情况，无疑这样的解决方案十分痛苦，这种情况很常见于不常使用互联网服务的父辈或祖父辈；第二种情况，基本上遇到密码泄露事件，撞库攻击，危险性是最高的；第三种情况，也是我上一种使用策略，虽然减轻的第二种情况的危险性，但还是有一定的危险；第四种情况，我陪朋友去ATM取款的时候，在他旁边陪了10多分钟，才算好密码取出现金🙂；第五种情况，要么太贵，要么平台限制，还不拥有密码的存储权。</p>\n<p>本文要解决的就是现有的这些痛点。在2019年的今天，我还是很推荐你尝试一下这套密码管理策略的。</p>\n<h2 id=\"我的解决方案\"><a href=\"#%E6%88%91%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>我的解决方案</h2>\n<h3 id=\"密码安全--便携\"><a href=\"#%E5%AF%86%E7%A0%81%E5%AE%89%E5%85%A8--%E4%BE%BF%E6%90%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>密码安全 &#x26;&#x26; 便携</h3>\n<p><strong>首先要解决的第一个痛点是密码安全的问题。</strong>我找的解决方案是<a href=\"https://flowerpassword.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">花密</a>，引用一下官方的宣传语</p>\n<blockquote>\n<p>不一样的密码管理工具：可记忆、非存储、更安全</p>\n<p>跨平台应用支持：桌面版、移动版，随处方便使用</p>\n<p>无需存储密码：计算获得最终密码，没有存储过程，更安全</p>\n</blockquote>\n<p>它的工作原理大概是这样子的：输入一个\"记忆密码\"+“区分代号”，然后经过一个特定的Hash算法，获得一个“最终密码”。这个Hash算法主体是由多个md5算法混淆而来，重复概率极其低，而且具有不可逆推导的特性。由于不同的网站使用不同的密码，因此安全性大大提高。</p>\n<p>但是，花密本身还有一定的缺陷。首先，它的网页版工具没有做移动端适配，而我并不想在每个平台多装一个软件来实现这个小的功能。其次，它的密码输出位数强制为16位，仅包含英文字母和数字，很多时候会超出网站的密码位数限制，而且评估的密码强度只能达到中等。</p>\n<p>因此，我决定自己写一个小工具来改进这些问题。</p>\n<h4 id=\"觅密\"><a href=\"#%E8%A7%85%E5%AF%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>觅密</h4>\n<p>受到花密的启发，我实现的工具名为<a href=\"https://github.com/Wsine/seekpassword\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">觅密</a>，并且开源在Github中，在此再次感谢花密的idea。</p>\n<p>该工具的整体思路如下：第一部分，基本上是复刻花密的思路，在此就不再复述了。第二部分，我加入了特殊字符进行混淆，基本上评估的密码强度能够达到强级别。第三部分，我将密码长度默认10，暂时没遇到密码长度限制不包含10的网站。第四部分，考虑到部分网站的密码内容限制，我增加了选项去除特殊字符的加入。一键复制密码也有实现，但是由于精简体积和不同的浏览器特性不一样，并没有加入弹窗功能提示复制成功，知道有复制功能就行了。</p>\n<p>因此该工具拥有如下的特性：</p>\n<ul>\n<li>完全开源</li>\n<li>移动端适配</li>\n<li>高强度密码</li>\n<li>更友好的密码长度</li>\n</ul>\n<p>这个只是一个小网页，依托Github Page运行，采用纯本地端计算，不涉及与服务器的交互，因此密码安全有保证，且开源。网页链接：<a href=\"https://wsine.github.io/seekpassword/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wsine.github.io/seekpassword/</a>。</p>\n<p>P.S. 如果你也会编程的话，完全可以fork一份后修改来定制自己的安全策略。普通用户直接使用这个网页也完全没有问题。</p>\n<p>这里顺便提醒一下，\"记忆密码\"和“区分代码”并不一定要恒定。记忆密码还是很推荐使用等级策略来记忆，简单分2~3级我觉得就足够了，毕竟安全性已经大大提高了，也就是说你仅需要记忆2~3个短密码即可。区分代码其实可以根据自己对网站的第一反应来记忆，比如昵称、别称、域名、拼音缩写等等，按照自己的喜欢即可。</p>\n<p><strong>这个网页其实也解决了一个便携性的痛点</strong>。</p>\n<p>不知道各位有没有这样的痛苦，当你临时来到一个新的机器想要登陆一个账号，但是由于是复杂的强密码完全无法记忆，所以你得要么得重新安装密码管理软件同步过来，或者用手机查看密码后手动输入，这种体验本身都不友好。由于觅密它本身只是一个网页，保存为浏览器书签即可快速使用查看，或直接在新电脑打开网页输入一下就得到最终密码了。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image459.jpg\" alt=\"seekpass\"></p>\n<h3 id=\"密码存储\"><a href=\"#%E5%AF%86%E7%A0%81%E5%AD%98%E5%82%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>密码存储</h3>\n<p>密码的安全性是提高了，<strong>下一个点要解决的是所有权的问题。</strong></p>\n<p>无论是笔记还是其他东西，我都希望我的数据能够掌握在我的手里。我来讨论一下极端的几种情况：</p>\n<ol>\n<li>哪天我发疯了，将整个软件仓库删了，你不记得算法的流程了怎么办</li>\n<li>哪天Github服务被block了或者倒下了，你不知道我将新的网站部署在哪了怎么办</li>\n<li>哪天1password / Lasspass等服务倒下了，你的高强度密码都丢失了怎么办</li>\n<li>哪天你更换了常用平台不用Apple的硬件了，你存储在keychain的密码怎么导出呢</li>\n</ol>\n<p>虽然这些情况都比较难达到，但我依然将这种情况考虑进去了</p>\n<h4 id=\"keepass\"><a href=\"#keepass\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>KeePass</h4>\n<p>我采用的密码管理软件是<a href=\"https://keepass.info/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">KeePass</a>，首先引用一下的它的官方介绍：</p>\n<blockquote>\n<p>KeePass is a free open source password manager, which helps you to manage your passwords in a secure way. You can put all your passwords in one database, which is locked with one master key or a key file. So you only have to remember one single master password or select the key file to unlock the whole database. The databases are encrypted using the best and most secure encryption algorithms currently known (AES and Twofish). For more information, see the <a href=\"https://keepass.info/features.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">features page</a>.</p>\n<p>我知道部分人可能看不懂，没关系，我大发慈悲来做一下简短的翻译：</p>\n<p>KeePass是一个开源的密码管理器。你可以存储你的密码到一个数据库中，并通过一个主密码或密钥文件加密（或一起用），同理解锁也需要他们。该数据库是使用当今已知最安全的加密算法AES和Twofish来加密的。</p>\n</blockquote>\n<p>首先安全性，采用的是最好的算法加密，只需要记忆一个主密码就好了，各大密码管理器均需要用户记忆主密码。</p>\n<p>其次所有权，所有密码都存储在一个数据库文件中，而这个文件完全掌握在你自己手中。</p>\n<p>然后可持续性，开源的算法及软件，完全不用担心服务提供商倒下，你总能找到方法从数据库文件中提取出你自己的密码。</p>\n<p>还有多样性，Keepass不仅能存储密码，还能存储notes和文件等等，像我将数字密码锁和路由器管理密码丢到这里真的好实用，我经常不用就忘记了。</p>\n<p>最后但也是最重要的一点是，它是免费的。无论1password还是Lastpass，价格基本都是3刀每个月，两百多一年吧，作为密码数据存储服务提供商，承担的风险不小，这个价格其实也合理。</p>\n<p>KeePass的官网下载为：<a href=\"https://keepass.info/download.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://keepass.info/download.html</a>，通过一步一步创建一个本地数据库，我个人推荐同时使用 主密码 (Master Password) 和密钥文件 (Key File) 来加密，十分不推荐启用微软账户 (Windows User Account) 来加密。然后你就能得到如下两个文件：</p>\n<pre class=\"language-text\"><code class=\"language-text\">~\n├── PasswordDatabase.kdbx\n└── PasswordDatabase.key</code></pre>\n<p>主密码建议记忆在你的大脑中，或通过纸质方式存储；密钥文件建议存储多份，至少有一份在云盘有一份在移动硬盘中。</p>\n<h4 id=\"webdav\"><a href=\"#webdav\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>WebDAV</h4>\n<p>但是，KeePass仅是一个算法/软件，并不包含云服务，不像1Password / Lasspass等提供多平台密码同步功能。但这明显是刚需啊，因此我找到的方案是WebDAV，惯例引用一下它的官方描述：</p>\n<blockquote>\n<p>Web Distributed Authoring and Versioning (<strong>WebDAV</strong>) is an extension of the Hypertext Transfer Protocol (HTTP) that allows clients to perform remote Web content authoring operations. <strong>WebDAV</strong> is defined in RFC 4918 by a working group of the Internet Engineering Task Force.</p>\n</blockquote>\n<p>简单点来说WebDAV仅是一个扩展的HTTP协议，允许客户端授权并远程访问和修改服务端的内容。这正是我们所需要的功能。</p>\n<p>2019年的各大网盘服务提供商中，支持WebDAV协议仅有<a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">坚果云</a>和<a href=\"https://www.dropbox.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dropbox</a>两家，后者由于众所周知的原因，本文仅讨论前者。</p>\n<p>坚果云的官网为：<a href=\"https://www.jianguoyun.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.jianguoyun.com</a>，注册并登陆后，通过下面如下的步骤，添加一个授权的应用密码</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image460.jpg\" alt=\"WebDAV\"></p>\n<p>然后创建你喜欢的路径，并将刚刚得到的两份文件上传到坚果云中，文件路径和文件名都可以自定义</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image461.jpg\" alt=\"jianguo_file\"></p>\n<p>顺带一提，坚果云的免费版本每个月限制上传和下载流量，如图片左下角显示，但如果你看我实际的数据库大小其实也只有几kb（当然如果你要用keepass存储大文件当我没说），所以我认为流量是完全不用担心的，而且由于服务器在国内且没有限制可以跑满带宽，作为常用云存储也不错。</p>\n<h3 id=\"密码易用\"><a href=\"#%E5%AF%86%E7%A0%81%E6%98%93%E7%94%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>密码易用</h3>\n<p>如果仅仅保证安全不考虑方便使用，我觉得也是很痛苦的一件事情。<strong>所以该章节要介绍的就是如何提高易用性。</strong></p>\n<p>之所以引入WebDAV，就是希望我们的数据库存储在云端，可以通过客户端随时访问并新增新密码，但又可以多平台同步。</p>\n<h4 id=\"windows官方客户端keepass\"><a href=\"#windows%E5%AE%98%E6%96%B9%E5%AE%A2%E6%88%B7%E7%AB%AFkeepass\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Windows官方客户端KeePass</h4>\n<p>在windows下面的话使用官方的客户端是比较好的选择。有下面的参数你是需要注意的：</p>\n<ul>\n<li>URL：这个URL是根据坚果云提供的服务器地址+你存储数据库的相对路径而来的，对比这图和上面的两幅图你就能发现规律了</li>\n<li>User name：就是上上图中的账号</li>\n<li>Password：注意这个并不是你登陆坚果云的密码，而是上上图中的显示密码里面的密码</li>\n<li>Remember：这个看你的喜好，我在我常用电脑上都是选择记住的，这样每次打开就只需要输入Master Password即可</li>\n<li>Master Password：根据自己设定的密码填写即可</li>\n<li>Key File：保存在本地的密钥文件路径</li>\n</ul>\n<p>填好这5个参数后你就可以直接打开远端的数据库了，每次编辑完之后记得点保存就好，它就会同步到远端的数据库了~</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image462.jpg\" alt=\"Keepass\"></p>\n<h4 id=\"web客户端tusk\"><a href=\"#web%E5%AE%A2%E6%88%B7%E7%AB%AFtusk\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web客户端Tusk</h4>\n<p>介绍链接：<a href=\"https://subdavis.com/Tusk/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://subdavis.com/Tusk/</a>，支持Chrome和Firefox，也是支持WebDAV的，非常棒(๑•̀ㅂ•́)و✧，不过我自己没有需求没用过就不截图了。</p>\n<p>####iOS客户端Fantasy Pass</p>\n<p>好了，接下来就到这篇的其中一个重点了！我尝试过官方推荐下载列表中的多个iOS平台的客户端，并没有一个是支持WebDAV协议的，这意味着我将不能跟远端的数据库双向同步。但是，在2019年我很幸运地在V2EX上面发现了一款新应用<a href=\"http://www.fantasypass.cn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FantasyPass</a>，首先也是引用一下它的官方简介：</p>\n<blockquote>\n<p>一个功能强大、便捷的Keepass的IOS客户端。</p>\n<p>简介的UI和流畅的动画，支持多密码文件、自动填充、附件添加和查看、JS自定义功能、常用通知栏插件和自定义键盘。让一切尽可能的奇幻!</p>\n</blockquote>\n<p>这款应用应该也是在2019年才上线的，而我也算是它的早期用户了，加入了官方的QQ群讨论。开发者是利用自己的业余时间独立开发的这款应用，也很积极听取用户的各种反馈。由于是业余时间独立开发，因此各种东西包括官网也还在建设中，所以介绍会略显不足。</p>\n<p>但是没关系，我来总结一下现有的一些优秀的功能：</p>\n<ul>\n<li>精美的UI设计，对刘海屏和2018版iPad Pro均有适配，常见网站的图标支持</li>\n<li>多种云平台同步，包括但不限于WebDAV，iCloud，Onedrive，Dropbox，GoogleDrive</li>\n<li>支持iOS12的AutoFill功能</li>\n<li>支持FaceID和TouchID</li>\n<li>支持附件的预览</li>\n<li>支持备份通讯录</li>\n</ul>\n<p>上述的每一个功能，我认为都是优胜于官方下载页面推荐的iOS客户端miniKeepass的。作为日常稳定使用的app，是完全没有问题的。使用上只要明白了上面的5个参数，那么这个app的使用也不会遇到什么问题就不再赘述了。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image463.jpg\" alt=\"fantasypass\"></p>\n<p>目前在App Store中的售价为一次性买断制12元，我认为这个app还是非常值得的。</p>\n<p>下载链接：<a href=\"https://apps.apple.com/cn/app/fantasypass-ikeepass/id1357961740\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://apps.apple.com/cn/app/fantasypass-ikeepass/id1357961740</a></p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>以上，就是我目前使用的密码管理方案了，免费，易用又安全。美中不足的可能在于生成密码这一步没有办法完美集成在别人开发的软件中，但是fantasypass有计划实现js extension，目前对我自己的使用来说也很知足了。</p>\n<p>都2019年了，何不找个时间试试更新一下自己的密码管理策略呢？</p>\n"}},{"node":{"title":"一个5年工科生的软件解决方案与故事","path":"/2019/02/18/5-years-cs-student-software-solution/","date":"18. February 2019","timeToRead":3,"description":"由于朋友们的咨询比较多，这篇文章就是来聊聊软件解决方案的","content":"<blockquote>\n<p>工欲善其事必先利其器</p>\n<p>适合自己的才是最好的</p>\n</blockquote>\n<p>首先这篇文章的初衷呢，很单纯，仅仅只是因为平时是一个工具控的爱好者，而身边朋友又大量和我咨询如何提高效率，解决痛点，所以特意写一篇文章，分享一下我在多平台下使用的软件，仅供参考。😀</p>\n<p>风向标：<em>轻量够用</em>、<em>跨平台</em>、<em>效率</em>、<em>联动</em>、<em>键盘优先</em>、<em>正版</em></p>\n<h2 id=\"一图以蔽之\"><a href=\"#%E4%B8%80%E5%9B%BE%E4%BB%A5%E8%94%BD%E4%B9%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>一图以蔽之</h2>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image464.jpg\" alt=\"软件导图\"></p>\n<h2 id=\"导航\"><a href=\"#%E5%AF%BC%E8%88%AA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>导航</h2>\n<p>[TOC]</p>\n<h2 id=\"windows-10-1809\"><a href=\"#windows-10-1809\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Windows 10 1809</h2>\n<p>作为一个有编写Office文档和IM聊天需求的人，我认为至少需要一台mac/win来作为处理这些事情的机器，除非跟你交流的人能跟你使用完全相同的平台和软件。</p>\n<hr>\n<h3 id=\"刚需\"><a href=\"#%E5%88%9A%E9%9C%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>刚需</h3>\n<h4 id=\"浏览器：chrome\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9Achrome\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>浏览器：Chrome</h4>\n<p>作为浏览器界的霸主，基本上每一个新网站的第一适配都会是Chrome，这能使你确保自己拥有最少遇到bug的体验。😎</p>\n<p>速度快，占用内存高，也是一个双刃剑，🤔 但是可以通过养成良好的使用习惯来减缓不足。我个人只有在搜索查资料的时候才会高并发打开新标签页，提前加载多个网页，然后快速浏览并关掉资料不合适的网页，一般情况下我的网页数量能控制在5个左右，配合快捷键跳转网页实在是如鱼得水，效率刚刚滴。顺便提一嘴👴 ，请学会使用合适的搜索引擎搜索合适的关键字，比如工科领域使用Google+English搜索排名前2的结果能解决你70%的问题，zhihu.com/github.com等也是搜索引擎，请不要再拘泥于那唯一的搜索引擎了。</p>\n<p>在登录了google的账号后，就能够无缝同步书签，这一点在多设备同步的情况下还是很有用的。但是书签本身是需要被整理和维护的，否则无法快速检索，那保存下来的书签也会变得没有意义。我是在大二的时候接触到这一方法论的，它能使我在未来的这几年里更快找到所需要的东西。同步书签本身依赖于google服务，微软的edge浏览器也在切换为chromium内核，这点我不予置评，如果体验好的话相信我会切换为edge浏览器的。😘</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image465.jpg\" alt=\"浏览器书签\"></p>\n<p>拥有大量的插件支持也是Chrome本身胜于其他家的因素之一，下面着重讲讲我用到的插件。</p>\n<h5 id=\"键盘控制：vimium\"><a href=\"#%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%EF%BC%9Avimium\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>键盘控制：Vimium</h5>\n<p>这是一个利用键盘来控制网页浏览的工具，多用键盘毫无疑问能提高效率，但是要注意按组合键时候的舒适性，有空多活动活动手指关节。🤞</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image466.gif\" alt=\"Vimium.gif\"></p>\n<p>我来说一下我日常使用到的按键及其功能</p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + t</td>\n<td>新建标签</td>\n</tr>\n<tr>\n<td>alt + d</td>\n<td>定位到地址栏</td>\n</tr>\n<tr>\n<td>gi</td>\n<td>定位到第一个编辑框</td>\n</tr>\n<tr>\n<td>f</td>\n<td>在当前标签页打开链接</td>\n</tr>\n<tr>\n<td>Shift + F</td>\n<td>在新标签页打开链接</td>\n</tr>\n<tr>\n<td>space</td>\n<td>滚动条下拉半屏</td>\n</tr>\n<tr>\n<td>Shift + space</td>\n<td>滚动条上拉半屏</td>\n</tr>\n<tr>\n<td>j</td>\n<td>滚动条下拉10个pixel</td>\n</tr>\n<tr>\n<td>k</td>\n<td>滚动条上拉10个pixel</td>\n</tr>\n<tr>\n<td>Shift + J</td>\n<td>切换到左边的标签页</td>\n</tr>\n<tr>\n<td>Shift + K</td>\n<td>切换到右边的标签页</td>\n</tr>\n<tr>\n<td>ctrl/alt + num</td>\n<td>跳转到特定标签页</td>\n</tr>\n<tr>\n<td>x / ctrl + w</td>\n<td>关闭当前标签页</td>\n</tr>\n</tbody>\n</table>\n<p>有了上面的这一套衔接的流程，基本上覆盖了网页浏览的全流程了。还剩打开书签的工作还是留个小红点/触摸板吧👻 ，虽然绝大部分情况下我都能记住域名。😁</p>\n<p>有一个值得吐槽的点在于，跳转到特定标签页这个功能上三个平台上面的快捷键都不统一，简直要被气死。Win下面是<code class=\"language-text\">ctrl + num</code>，Linux下面是<code class=\"language-text\">alt + num</code>，Mac下面是<code class=\"language-text\">command + num</code>。💩虽然曾经受不了了写了一个<a href=\"https://github.com/Wsine/AltNumberTab\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">小插件</a>，但如果想提交到chrome应用商店还得缴费注册google开发者，遂不了了之（忍耐）。</p>\n<h5 id=\"规则代理：switchyomega\"><a href=\"#%E8%A7%84%E5%88%99%E4%BB%A3%E7%90%86%EF%BC%9Aswitchyomega\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>规则代理：SwitchyOmega</h5>\n<p>不知道各位看官有没有遇到这样的痛点，如果不使用代理，则想上去的网站上不去；如果全局使用代理，则国内的网站流量绕了一大圈才到达电脑，体验感贼低。但SwitchyOmega就是来解决这个痛点的。</p>\n<p>首先你可以设置一个你自己喜欢的代理</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image467.jpg\" alt=\"代理\"></p>\n<p>然后再设置一个<a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">规则列表</a>，满足规则的流量走proxy代理，不满足规则的流量走直连，也可以互换，随你喜欢哈~</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image468.jpg\" alt=\"代理2\"></p>\n<p>但是，这个但是很关键哈。一个规则列表肯定不能满足全部的需求的，所以Switchy酱还提供了手动选择的option。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image469.jpg\" alt=\"代理3\"></p>\n<p>大部分情况下我们只需要访问网站就好，体验感直升。👍</p>\n<h5 id=\"剪裁：印象笔记剪裁插件\"><a href=\"#%E5%89%AA%E8%A3%81%EF%BC%9A%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E5%89%AA%E8%A3%81%E6%8F%92%E4%BB%B6\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>剪裁：印象笔记剪裁插件</h5>\n<p>曾经，我也是一个Pocket稍后阅读的中毒使用者，喜欢把很多有用的信息收纳起来，待有一天能够重新阅读，温故而知新，亦或是分享给别人。<strong>但是</strong>，Pocket只是收纳了一个网址而已，当源内容被删的时候，你的收纳也会随之烟消云散QAQ，尤其是微信公众号的文章，在短时间的爆款文章发出来的时候，过一个小时再访问都显示被举报了就再也访问不到了，多少深度好文被掩埋呀</p>\n<p>印象笔记的剪裁功能才让我领略到什么叫做剪裁。我就用知乎这样的瀑布流来展示一下好了，剪藏的格式巨多，而且隐藏广告这个真的是赞赞赞，试问谁收纳还把垃圾一起收纳进来啊</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image470.jpg\" alt=\"印象笔记\"></p>\n<p><strong>更重要的是</strong>，知识收纳最怕的是只收不二次阅读，然后重复一遍又一遍地收纳。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image471.jpg\" alt=\"印象搜索\"></p>\n<p>不过检索深度还有成功率还很低就是了，目前应该只停留在title级别搜索？但总归是一个好的开始。</p>\n<h4 id=\"im：微信\"><a href=\"#im%EF%BC%9A%E5%BE%AE%E4%BF%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IM：微信</h4>\n<p>国民级应用，失去了它就失去了连接。学会搭配快捷键，IM的沟通效率还能再提升一个档次喔。</p>\n<table>\n<thead>\n<tr>\n<th>按键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ctrl + alt + w</td>\n<td>调出微信</td>\n</tr>\n<tr>\n<td>ctrl + f</td>\n<td>搜索联系人</td>\n</tr>\n<tr>\n<td>↑ / ↓</td>\n<td>切换联系人</td>\n</tr>\n<tr>\n<td>Esc</td>\n<td>关闭微信窗口</td>\n</tr>\n<tr>\n<td>alt + a</td>\n<td>调用微信截图</td>\n</tr>\n</tbody>\n</table>\n<p>凭借手速党的胜利，3秒回复一个新消息都是很稀松平常的事情。✌️</p>\n<h4 id=\"图片浏览：自带photos\"><a href=\"#%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%EF%BC%9A%E8%87%AA%E5%B8%A6photos\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>图片浏览：自带Photos</h4>\n<p>这个工具吧，我真的是从小看着它大的233😆</p>\n<ul>\n<li>最初吧并不支持透明底的png图像，这我当时只能想办法调用win7时代的图片浏览器才能看到</li>\n<li>然后吧并不支持raw图像格式，这我觉得倒没什么，很多也不支持，找个小软件看看就好了，但是现在支持了，点个赞</li>\n<li>再来吧gif图片不会播放，是静止的，噗；还好有ie11；不过现在也支持了</li>\n</ul>\n<p>我简直就像一个老父亲一样看着它的成长，满满的记忆</p>\n<p>这软件还支持图像编辑功能，裁剪大小，添加滤镜等都不是问题，配合<code class=\"language-text\">Shift + Win + S</code>快捷键截图还是挺方便的。</p>\n<p>不过客官要清楚，由于还多了编辑功能，这软件的加载速度还是相对比较慢的，如果是图像工作者尽早找替代软件吧。<a href=\"https://cn.bandisoft.com/honeyview/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">honeyview</a>不错喔，免安装还没有广告，还要什么自行车，和bandizip同厂软件，哎，韩国软件也还是很不错滴。😘</p>\n<h4 id=\"视频播放器：potplayer\"><a href=\"#%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8%EF%BC%9Apotplayer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>视频播放器：PotPlayer</h4>\n<p>这个在Win10时代被吹爆的播放器，我就不再吹了。总之呢，一个播放器只要能外挂字幕，软件包小，内存占用低，CPU占用低，调节字幕与视频的gap，切换音轨，硬件加速，不影响续航，方向键调节几帧，空格键暂停播放，支持的播放格式全，UI还过得去，我一般就不要求什么了，这个要求不算高吧？🙈</p>\n<p>以前吧，我总是用鹅厂的QQ影音，无奈软件停更太久了，适配太差功能都有问题了，才不得不换播放器。不过最近看到3.0大版本更新漂亮了，我很看好你唷，待你成熟之时我再支持国产可好🐣</p>\n<h4 id=\"输入法：自带微软拼音\"><a href=\"#%E8%BE%93%E5%85%A5%E6%B3%95%EF%BC%9A%E8%87%AA%E5%B8%A6%E5%BE%AE%E8%BD%AF%E6%8B%BC%E9%9F%B3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>输入法：自带微软拼音</h4>\n<p>说真的，这是唯一一个能够在win32、metro、uwp三种应用间通用的输入法了，尽管可能有一些小bug，但至少能用。在1809版本中，联想功能、错误纠正都好了很多了，处于可用的状态了。</p>\n<p>之前一直用的是搜狗拼音输入法智慧版，一个看似大众实质小众的输入法，还没有弹窗，一般人我不告诉他😏</p>\n<p>还有一个字体渲染的问题一直困扰着我，微软拼音的字体渲染就像用mactype一样，但怎么样才能将这种字体也应用在别的软件啊😞</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image472.jpg\" alt=\"字体渲染\"></p>\n<h4 id=\"音乐：qq音乐\"><a href=\"#%E9%9F%B3%E4%B9%90%EF%BC%9Aqq%E9%9F%B3%E4%B9%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>音乐：QQ音乐</h4>\n<p>音乐我倒是没什么好分享的，PC端上我只需要曲库比较全就好了，上市的QQ音乐就是首选了。而且还有推荐算法，还行吧，但推荐算法怎么能比得上云村的呢😏</p>\n<p><a href=\"https://listen1.github.io/listen1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Listen1</a>也是一个优秀的音乐播放器，拥有全平台的歌曲，有兴趣的可以试试~</p>\n<h4 id=\"下载工具：迅雷极速版\"><a href=\"#%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7%EF%BC%9A%E8%BF%85%E9%9B%B7%E6%9E%81%E9%80%9F%E7%89%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>下载工具：迅雷极速版</h4>\n<p>这个说实在的，截止至发稿日，在国内的P2P环境里，各大视频下载点使用<code class=\"language-text\">thunder://</code>协议下，谁能pk掉迅雷呢，然而迅雷的吃相实在是太难看了。尊享版的价格居高不下，会员的去广告还是给你留下了一个大大的浏览器窗口。真的是要吐槽的点实在是太多了。对了，还有那强制监控我各种下载入口的，明明这次去掉了监控，下次开机启动后就好像没保存过这个设置一样，真的是太恶心了。</p>\n<p>迅雷极速版，拥有无广告，同等的下载功能，不过最近多了一个升级提醒，点一下就是了，反正我使用频率低。安装包流传于各个网络角落，注意鉴别，朋友可以问我拿哈。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>大小</th>\n<th>md5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ThunderSpeed1.0.35.366.exe</td>\n<td>23.2MB</td>\n<td>ab002005168e0e6439ac4667dbecff84</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image473.jpg\" alt=\"迅雷极速版\"></p>\n<h4 id=\"密码管理：keepass\"><a href=\"#%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9Akeepass\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>密码管理：Keepass</h4>\n<p>都2019年了，互联网服务这么多，在生物识别技术没有普及的当下，依赖有限的几个密码，实在是虎口拔须。这里先卖个关子，我会另写一篇文章介绍密码管理。</p>\n<hr>\n<h3 id=\"办公\"><a href=\"#%E5%8A%9E%E5%85%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>办公</h3>\n<h4 id=\"文本编辑器：sublime-text-3\"><a href=\"#%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9Asublime-text-3\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>文本编辑器：Sublime Text 3</h4>\n<p>一个好的文本编辑器，才是星巴克里面装逼的利器。👨‍💻 那么Sublime好在哪里呢？</p>\n<ul>\n<li>颜值过关</li>\n<li>代码高亮</li>\n<li>优秀快捷键</li>\n<li>搜索跳转</li>\n<li>插件系统</li>\n<li>项目文件树</li>\n</ul>\n<p>吹到这里我觉得就够了，反正VS Code的反人类快捷键又不可能打败Sublime的对吧🤷‍♂️</p>\n<p>在这里我顺便提一下，win10的记事本<strong>居然更新了</strong>~现在支持Unix的换行符等功能，哎呦不错喔</p>\n<h4 id=\"office：microsoft-office-365\"><a href=\"#office%EF%BC%9Amicrosoft-office-365\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Office：Microsoft Office 365</h4>\n<p>首先我在这里先明确一下，Office套件包括了Word + Excel + PowerPoint + Outlook + OneDrive + SharePoint + OneNote，只有合理运用其联动的功能才能发挥它更强的能力。</p>\n<p>举个栗子👨‍🏫 ：你用Word写了一篇文章，保存在OneDrive中，通过SharePoint共享给小伙伴，小伙伴收到了邮件提醒用Outlook打开超链接直接跳转到Word中，然后直接在上面做一些修改和批注讨论，一来二往，终稿就写好了，最后还可以将它虚拟打印在OneNote中写写总结学到了什么。你会发现这里面有3个优点：①文件保存在OneDrive中途怎么换电脑打开的文件都一样，完全不需要U盘了；②修改和批注都在同一份文件中操作，没有了什么<code class=\"language-text\">装逼指南v3终稿打死也不修改版本.pptx</code>这种杂乱无章命名；③从无到产出到总结能给下一篇提供思路和参考，完成了一个良性循环。💁‍♂️</p>\n<p>不过呢，Office套件还是需要付费的，一般高校和企业都有提供，建议先考虑一下有没有。自己需要购买的话，建议凑6人一起买家庭版，相对来说划算很多。预算不足的用WPS也不错，轻量够用，稍微忍受一下广告，功能操作上也很优秀，还有多标签功能呢，格式尽量选择<code class=\"language-text\">docx、xlsx、pptx</code>这种标准的格式。</p>\n<h4 id=\"邮箱客户端：自带邮箱\"><a href=\"#%E9%82%AE%E7%AE%B1%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%9A%E8%87%AA%E5%B8%A6%E9%82%AE%E7%AE%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>邮箱客户端：自带邮箱</h4>\n<p>Win10自带这个邮件客户端基本功能基本已经齐全了，签名归档一样不漏，我觉得吧够用就好，毕竟个人使用其实不需要太多fancy的功能。</p>\n<h4 id=\"压缩工具：bandizip\"><a href=\"#%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%EF%BC%9Abandizip\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>压缩工具：Bandizip</h4>\n<p>Bandizip是一款颜值挺高的压缩工具，功能不断在更新与维护，只是感觉更新频率太高了，动不动就提示升级一下。功能本身是挺优秀的，解压速度快，还能解压像<code class=\"language-text\">tar.gz</code>后缀的压缩包。轻量简洁是它的优点。</p>\n<p>这里也提一下另一款，2345好压，功能也很齐全，自带工具箱文件校验码等，宣称永久免费（之前还宣传无广告），看需要使用吧。我倒是不太需要，毕竟我会调用系统命令看文件校验码不是😜 。</p>\n<h4 id=\"pdf阅读器：edge\"><a href=\"#pdf%E9%98%85%E8%AF%BB%E5%99%A8%EF%BC%9Aedge\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>pdf阅读器：Edge</h4>\n<p>Edge本身的阅读功能我觉得真心棒，无论是mobi等格式电子书也能阅读，pdf就更不在话下了。Edge的标注功能能够媲美Adobe Reader，就差下划线了，我反馈了一下。但是打开速度稍慢，不能接受的话是用其他软件比较好。但是它还支持手写✍🏻  和OneNote联动我就喜欢上它了。</p>\n<h3 id=\"学习\"><a href=\"#%E5%AD%A6%E4%B9%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>学习</h3>\n<h4 id=\"云存储：onedrive\"><a href=\"#%E4%BA%91%E5%AD%98%E5%82%A8%EF%BC%9Aonedrive\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>云存储：OneDrive</h4>\n<p>OneDrive本身就是Win10自带的云存储，我喜欢把将重要的文档和照片都保存到OneDrive中，同步完云端之后，还可以选择释放本地空间。这样哪怕是一台32G的小容量设备，也能发挥它巨大的价值。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image474.jpg\" alt=\"释放本地空间\"></p>\n<p>OneDrive的速度其实本身并不慢，但是貌似在不同的地区有不同的速度表现，实测在国内的4个一线城市和几个二线城市速度我都能接受，基本满足我的差旅需求了。</p>\n<h4 id=\"云笔记：印象笔记\"><a href=\"#%E4%BA%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>云笔记：印象笔记</h4>\n<p>说实话，我一直都是微软服务的忠实拥护者。但是OneNote的速度与OneDrive不可同日而语，OneNote的同步速度一般为n小时（0.5 &#x3C; n &#x3C; 5）。所以不得不在今年切换为印象笔记，还好它常年打6折，感觉真的是一个良心软件。我不会讨论OneNote与Evernote谁好谁坏，这里反而想引用一个观点给大家参考。🌞</p>\n<blockquote>\n<p>Evernote就像一个图书馆，广而纳之，它扩展的是你的广度（Breath）；OneNote就像一个工作室，深而究之，它扩展的是你的深度（Depth）；</p>\n</blockquote>\n<p>笔记术是一个伴随人们成长的一个持续过程，学会了它我真的感觉受益匪浅。之后我会另写一篇文章介绍我会如何同时利用Evernote和OneNote来记录我的笔记的。</p>\n<h4 id=\"待办工具：microsoft-to-do\"><a href=\"#%E5%BE%85%E5%8A%9E%E5%B7%A5%E5%85%B7%EF%BC%9Amicrosoft-to-do\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>待办工具：Microsoft To-Do</h4>\n<p>GTD（Getting Thing Done）是一个优秀的理念，它能帮助你在茫然时打开电脑的时候告诉你下一步有什么事情可以做的。但是这个依赖一个习惯，通过手机端收集整理Thing，在打开电脑的时候瞄一眼Todo软件，然后将事情Done。这能节省了你大量浪费在视频网站的时间。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image475.jpg\" alt=\"Todo\"></p>\n<h4 id=\"思维导图：xmind-zen\"><a href=\"#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%EF%BC%9Axmind-zen\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>思维导图：XMind ZEN</h4>\n<p>养成思维导图和大纲的习惯，能使你面对写文章的时候，不会无从下手，用来整理读书时候的作者思维也是一个巨大的帮助。在这点上我觉得自己的使用还不够深入，希望能够在更多的场景下挖掘它更多的作用。</p>\n<p>ZEN本身的设计非常棒(๑•̀ㅂ•́)و✧，加入了禅模式，专注于头脑风暴本身而不用受到其他事情的打扰。</p>\n<h3 id=\"geek\"><a href=\"#geek\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Geek</h3>\n<h4 id=\"自由冲浪：ss--openvpn\"><a href=\"#%E8%87%AA%E7%94%B1%E5%86%B2%E6%B5%AA%EF%BC%9Ass--openvpn\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>自由冲浪：Ss + OpenVPN</h4>\n<p>这个我就不赘述了。</p>\n<h4 id=\"远程连接：cmd--自带ssh\"><a href=\"#%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%EF%BC%9Acmd--%E8%87%AA%E5%B8%A6ssh\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>远程连接：Cmd + 自带ssh</h4>\n<p>曾经我是一个xshell的长期用户，自从在企业网里面无法使用后，我就不得不寻求其他的解决方案。我对ssh的要求其实还真的蛮高的，最后也特别惊讶自己会选中这个solution。我先来列举一下自己对ssh工具的要求：</p>\n<ul>\n<li>远程连接配色正常显示</li>\n<li>powerfont字体支持</li>\n<li>x11 forwarding支持</li>\n<li>tmux的状态栏正常显示</li>\n<li>可以连续选中多行文本</li>\n<li>正常的<code class=\"language-text\">ctrl + c</code> 终止程序，<code class=\"language-text\">ctrl + v</code> tmux热键，<code class=\"language-text\">ctrl + w</code> vim热键</li>\n<li>正常的<code class=\"language-text\">ctrl + shift + c/v</code>复制粘贴或鼠标选中复制中键粘贴</li>\n<li>多标签功能支持</li>\n</ul>\n<p>列举了这么多相信很多小伙伴看到都要吐槽我了，但是我每天有大量的时间花费在这个ssh工具上面，工欲善其事必先利其器，我一定会选出最适合自己的方案。不过鱼与熊掌不可兼得，比如这个solution就不支持多标签，挑选最合适就好。其实我自己也没想到Win10上面的进步这么快，打开cmd直接<code class=\"language-text\">ssh username@ip</code>就可以连上服务器，真的特别省心，速度极快。最后上一张图镇楼😀</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image476.jpg\" alt=\"cmd+ssh\"></p>\n<h4 id=\"linux：wsl---ubuntu\"><a href=\"#linux%EF%BC%9Awsl---ubuntu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Linux：WSL - Ubuntu</h4>\n<p>wsl算是补齐了windows系统下的命令行编程的支持，至此我个人认为三大平台都有了Bash的支持，严格来说我的综合评价是<code class=\"language-text\">Linux &gt; Windows &gt; MacOS</code>，毕竟mac下面的bash要适配起来得改好多东西，这是减分项。</p>\n<p>关于WSL在Windows下面的调优使用，我会另外写一篇文章来介绍提高它的易用性。</p>\n<h4 id=\"markdown：typora\"><a href=\"#markdown%EF%BC%9Atypora\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Markdown：Typora</h4>\n<p>颜值与功能齐飞，说的就是Typora。Markdown作为文章编写的当红炸子鸡，确实带来了很多的便利，将内容的编写和格式的渲染分开使得一处编写，多处发布成为了可能。这跟编译型语言的思路很香，但是这里面会遇到两个矛盾：</p>\n<ol>\n<li>按照自我理解的md格式编写，最终还是需要等到本地预览的时候才能知道格式有没有编写错误，然后再来改格式</li>\n<li>本地调整完格式后，再上传到不同的平台发布，然后会发现不同平台使用的格式不一样导致部分渲染失败</li>\n</ol>\n<p>Typora针对这两个问题有相应的解决方案：</p>\n<ol>\n<li><code class=\"language-text\">所见即所得</code>的编写方式，即编辑栏跟渲染栏在同一个界面中，确保了本地编写的格式正确性</li>\n<li>采用了最严格的<a href=\"https://github.github.com/gfm/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub Flavored Markdown Spec</a>标准来作为格式规范，并自带格式化功能，减少本地自主调整格式的需要</li>\n</ol>\n<p>最后再配合一个图床服务，Typora无愧于颜值与功能齐飞~~~👍</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image477.jpg\" alt=\"typora\"></p>\n<h4 id=\"键鼠共享：synergy\"><a href=\"#%E9%94%AE%E9%BC%A0%E5%85%B1%E4%BA%AB%EF%BC%9Asynergy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>键鼠共享：Synergy</h4>\n<p>作为一个Linux桌面用户，还是需要有一台win/mac作为自己的主力聊天与写文档设备的。包括写代码的时候需要与别人沟通，怎么比得上截个图圈一下发给别人更快捷方便呢？所以迫于Linux没有好的跨平台沟通软件（or被垄断的那个没有）anyway，这个还是必不可少的。</p>\n<p>这个软件本身也比较神奇，这是一个<strong>开源收费软件</strong>。软件整体可以在github上找到源代码，但是你会发现没有任何的编译文档说明。在官网下载这个软件需要付费license激活。</p>\n<p><strong>但是</strong>，这个但是很重要哈，旧版本是有提供编译好的下载地址的：<a href=\"https://github.com/brahma-dev/synergy-stable-builds/releases%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%B9%B6%E4%B8%8D%E7%AE%97%E8%BF%9D%E5%8F%8D%E6%AD%A3%E7%89%88%E3%80%82\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/brahma-dev/synergy-stable-builds/releases，使用开源软件并不算违反正版。</a></p>\n<p>最终整体的体验就是，我可以利用台式机的机械键盘和人体工程学鼠标，移动鼠标平滑切换两个桌面，各自操作不同的软件，在A机器复制文字，在B机器粘贴文字，得到更好的软件体验。可能还比较期待的是，如果新版本中能加入复制粘贴截图功能和内置键盘快捷键（可自主配置实现）切换桌面功能，我还是愿意为其付费的。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image478.jpg\" alt=\"server\"></p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image479.jpg\" alt=\"client\"></p>\n<h2 id=\"ubuntu-1604\"><a href=\"#ubuntu-1604\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ubuntu 16.04</h2>\n<h4 id=\"浏览器：chrome-1\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9Achrome-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>浏览器：Chrome</h4>\n<p>这个上面也说过了，只要登录同一个账号就好。</p>\n<h4 id=\"office：libreoffice\"><a href=\"#office%EF%BC%9Alibreoffice\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Office：LibreOffice</h4>\n<p>能看就行，千万别作死去编辑然后发给老板。</p>\n<h4 id=\"文本编辑器：vim\"><a href=\"#%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%9Avim\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>文本编辑器：Vim</h4>\n<p>学习曲线有多难，相信这点是不用我多说的，它本身很适合想要理解软件编译链接构建等过程的开发者，如果只是单纯想要搞开发，那用什么其实都是ok的。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image480.jpg\" alt=\"vim\"></p>\n<h4 id=\"输入法：rime\"><a href=\"#%E8%BE%93%E5%85%A5%E6%B3%95%EF%BC%9Arime\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>输入法：Rime</h4>\n<p>Rime算是在Linux下最方便，最稳定的输入法了。可以通过apt一键安装，然后也不需要配置，也不太需要考虑ibus/ficix底层引擎，反正都有。颜值的话我觉得是ok的，自动联想功能我感觉可以打7分。软件本身也支持很多定制化，贴一个默认的图以示赞赏。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image481.jpg\" alt=\"rime\"></p>\n<h4 id=\"shell：zsh--bash\"><a href=\"#shell%EF%BC%9Azsh--bash\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Shell：Zsh + Bash</h4>\n<p>Zsh相比Bash是会有更优秀的用户体验的，shell本身的CPU和内存占用是可以忽略的，所以比拼就在功能点上。zsh + oh-my-zsh 可以带来 select mode、git promt、intelligent completion、better alias等优秀功能，如果日常大量的开发都能在一台机器上，还是比较建议试用zsh的。</p>\n<p>bash通过调教也能达到更好的体验，但想要比肩zsh估计还是有点难的，需要在多服务器端操作的，建议也调整一下bash使其更适合自己。👨‍💻</p>\n<h4 id=\"终端复用器：tmux\"><a href=\"#%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8%EF%BC%9Atmux\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>终端复用器：Tmux</h4>\n<p>一个终端连接使无法满足日益增长的多进程需求，而tmux在本地与服务端都能被使用，且能够挂载在后台运行，就算因为网络不稳定远程连接断线了也能重新连接恢复上下文，实乃居家旅行必备的神器啊。👨‍💻</p>\n<h4 id=\"图像浏览器：自带image-viewer\"><a href=\"#%E5%9B%BE%E5%83%8F%E6%B5%8F%E8%A7%88%E5%99%A8%EF%BC%9A%E8%87%AA%E5%B8%A6image-viewer\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>图像浏览器：自带Image Viewer</h4>\n<p>能用就行。</p>\n<h4 id=\"视频播放器：vlc\"><a href=\"#%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8%EF%BC%9Avlc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>视频播放器：Vlc</h4>\n<p>够用就好。</p>\n<h4 id=\"屏幕录制：kazam\"><a href=\"#%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6%EF%BC%9Akazam\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>屏幕录制：Kazam</h4>\n<p>这个还是蛮好用的，实力吹一句。</p>\n<h4 id=\"屏幕色温：redshift\"><a href=\"#%E5%B1%8F%E5%B9%95%E8%89%B2%E6%B8%A9%EF%BC%9Aredshift\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>屏幕色温：Redshift</h4>\n<p>调节屏幕过滤蓝光，一直是我使用电子产品的刚需。Redshift的使用相比f.lux来说在Ubuntu上面要简单得多，安装配置启动都要简单一些，效果我倒没感觉太大的差别。只要蓝光被过滤了，那么一天下来的疲劳感还是会少一些的。💡</p>\n<h4 id=\"markdown：typora-1\"><a href=\"#markdown%EF%BC%9Atypora-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Markdown：Typora</h4>\n<p>使用体验上跟windows下没有任何差别，好评！</p>\n<h4 id=\"键鼠共享：synergy-1\"><a href=\"#%E9%94%AE%E9%BC%A0%E5%85%B1%E4%BA%AB%EF%BC%9Asynergy-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>键鼠共享：Synergy</h4>\n<p>见上。</p>\n<h2 id=\"ios\"><a href=\"#ios\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>iOS</h2>\n<h3 id=\"工作\"><a href=\"#%E5%B7%A5%E4%BD%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>工作</h3>\n<h4 id=\"邮箱：mail--outlook（办公）\"><a href=\"#%E9%82%AE%E7%AE%B1%EF%BC%9Amail--outlook%EF%BC%88%E5%8A%9E%E5%85%AC%EF%BC%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>邮箱：Mail + Outlook（办公）</h4>\n<p>通过Mail app来连接自己的hotmail邮箱（早期用户🖖 ），然后通过Outlook app来连接公司的office 365邮箱，基本就能满足我低频的个人邮箱使用但不错过任何信息，高频的办公邮箱使用且自带过滤不错过重要信息。</p>\n<p>但这里还是需要吐槽一些outlook app自身对于邮件的加载问题，加载速度很慢且不稳定，对于多个人回复过后的邮件阅读也是一件糟心的事情。</p>\n<h4 id=\"待办工具：reminders\"><a href=\"#%E5%BE%85%E5%8A%9E%E5%B7%A5%E5%85%B7%EF%BC%9Areminders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>待办工具：Reminders</h4>\n<p>通过Reminders app来连接自己的microsoft服务，跟电脑上的microsoft todo软件能够同步，因此无论是在手机端还是在电脑端，都可以正常添加todo item或者resolve item还是重分类都行，非常棒(๑•̀ㅂ•́)و✧</p>\n<h4 id=\"云存储：onedrive-1\"><a href=\"#%E4%BA%91%E5%AD%98%E5%82%A8%EF%BC%9Aonedrive-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>云存储：OneDrive</h4>\n<p>手机端上我也使用OneDrive app，不过加载还是挺慢的，要是File app能够支持连接OneDrive就好了~</p>\n<h4 id=\"扫描器：office-lens\"><a href=\"#%E6%89%AB%E6%8F%8F%E5%99%A8%EF%BC%9Aoffice-lens\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>扫描器：Office Lens</h4>\n<p>Office Lens最近终于更新了可以让用户手动调节自动捕捉边缘的角点了，毕竟算法本身是有局限性的，自从多了这个功能，我就能将重要的纸质文档扫描下来然后一键保存到OneDrive中，感觉还是棒棒哒(๑•̀ㅂ•́)و✧</p>\n<h4 id=\"云笔记：印象笔记-1\"><a href=\"#%E4%BA%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>云笔记：印象笔记</h4>\n<p> 基本上我是不会在手机端做编辑的（除了名片扫描），所以纯阅读体验对我来说很重要。对于网页转存和markdown笔记的阅读还不足以外，普通的笔记的手机适配性我还是比较喜欢的，相比之前用OneNote的时候不断在小屏幕上移动布局，这个更让我喜欢一些。</p>\n<p>还有它的名片扫描功能也挺好用的，就是自动识别能力不强，我理解这里的难度但还是有提升空间的。</p>\n<h4 id=\"双因子验证器：google-authenticator\"><a href=\"#%E5%8F%8C%E5%9B%A0%E5%AD%90%E9%AA%8C%E8%AF%81%E5%99%A8%EF%BC%9Agoogle-authenticator\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>双因子验证器：Google Authenticator</h4>\n<p>本来嘛我是一个微软的忠实用户，第一思考就是Microsoft Authenticator。然而，功能一样的情况下，我还是选择了颜值哈哈哈。Google家的这款还是字体大且明亮好看啊啊。</p>\n<h3 id=\"社交\"><a href=\"#%E7%A4%BE%E4%BA%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>社交</h3>\n<h4 id=\"qq：tim\"><a href=\"#qq%EF%BC%9Atim\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>QQ：TIM</h4>\n<p>对于QQ这个工具来说，我已经是一个叔叔级别的人儿了。早已忘却了QQ空间，QQ农场是什么感觉了，只剩下单纯的IM需求。所以TIM相对其他的功能来说就比较纯粹了，我还挺喜欢的，加法与减法的矛盾并不存在。</p>\n<h4 id=\"微博：weibo-intl\"><a href=\"#%E5%BE%AE%E5%8D%9A%EF%BC%9Aweibo-intl\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>微博：Weibo intl.</h4>\n<p>微博国际版也挺明亮简洁的，修复了时间线的问题后，也就能满足八卦的入口，日常抽奖的需求噗(/≧▽≦)/。但绝大部分的需求还是需要在普通版才有，比如重新绑定新手机。</p>\n<h4 id=\"职场：领英\"><a href=\"#%E8%81%8C%E5%9C%BA%EF%BC%9A%E9%A2%86%E8%8B%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>职场：领英</h4>\n<p>这里相对来说会比较简单一点，描述一下自己，给自己认可的人的技能点+1，我认为是职场中最美妙的东西，但希望不要在未来沦落成像Github一样的刷star的业务。有时候当一个小透明也挺好的，何必利用信息不对等来抬高自己导致人生更艰难呢。</p>\n<h3 id=\"其他\"><a href=\"#%E5%85%B6%E4%BB%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>其他</h3>\n<h4 id=\"词典：必应词典\"><a href=\"#%E8%AF%8D%E5%85%B8%EF%BC%9A%E5%BF%85%E5%BA%94%E8%AF%8D%E5%85%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>词典：必应词典</h4>\n<p>我没有选择有道，是因为广告太多。我没有选择欧路，是因为启动页太慢。我所需要的仅仅是快速打开app，查一下单词的意思就足够了。学习英语单词等功能还是交给专业的app来做吧。</p>\n<h4 id=\"外卖：饿了么\"><a href=\"#%E5%A4%96%E5%8D%96%EF%BC%9A%E9%A5%BF%E4%BA%86%E4%B9%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>外卖：饿了么</h4>\n<p>在这个55开的年代，选什么不一样呢？</p>\n<h4 id=\"密码管理：fantasypass\"><a href=\"#%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%EF%BC%9Afantasypass\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>密码管理：FantasyPass</h4>\n<p>怎么说呢，这是一款密码管理工具的后起之秀，它弥补了keepass在iOS端的云同步的缺失。开发者还是一个学生，要对这个app有一定的包容性。</p>\n<p>关于更详细的介绍，我会在密码管理的文章中再详细述说的。</p>\n<h3 id=\"阅读\"><a href=\"#%E9%98%85%E8%AF%BB\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>阅读</h3>\n<h4 id=\"新闻：zaker-pro\"><a href=\"#%E6%96%B0%E9%97%BB%EF%BC%9Azaker-pro\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>新闻：ZAKER Pro</h4>\n<p>这是一款最良心的应用了，仅售1元，且说没有广告就是没有广告！能够分类订阅不用的新闻，相比推荐的不确定性来说，我还是更喜欢这个style。</p>\n<h4 id=\"降价：什么值得买\"><a href=\"#%E9%99%8D%E4%BB%B7%EF%BC%9A%E4%BB%80%E4%B9%88%E5%80%BC%E5%BE%97%E4%B9%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>降价：什么值得买</h4>\n<p>人称 色魔张大妈 。算是唯恐天下不买买买，想尽一切办法让你心动，没有自制力的同学请小心安装喔。它上面的好物推荐，降价提醒，产品评测都是我很喜欢的功能，回归第一点<code class=\"language-text\">工欲善其事必先利其器</code>，买到合适的东西你的生产力就会跟着提高了。</p>\n<p>希望，SMZDM能够支持markdown编写文章吧，我也会考虑在上面写写东西的。</p>\n<h4 id=\"消遣：知乎\"><a href=\"#%E6%B6%88%E9%81%A3%EF%BC%9A%E7%9F%A5%E4%B9%8E\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>消遣：知乎</h4>\n<p>真的只是消遣，就别打算学知识了。</p>\n<h3 id=\"理财\"><a href=\"#%E7%90%86%E8%B4%A2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>理财</h3>\n<h4 id=\"投资查看：同花顺\"><a href=\"#%E6%8A%95%E8%B5%84%E6%9F%A5%E7%9C%8B%EF%BC%9A%E5%90%8C%E8%8A%B1%E9%A1%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>投资查看：同花顺</h4>\n<p>同花顺这个软件做得还算蛮不错的，查看K线和放大缩小的一些操作，深得我的直觉喜欢。有一次我还跟客服小姐姐聊了十来分钟，说明着我使用这个软件的一些情况，他们也会记录下来反馈到研发中。从这点上来看，我还是很看好这个的未来的。但我一般只会利用这个软件看一些信息，购买还是会通过别的平台，没办法，购买和维护还是别的更方便一些。</p>\n<h3 id=\"出行\"><a href=\"#%E5%87%BA%E8%A1%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>出行</h3>\n<h4 id=\"飞机酒店：携程\"><a href=\"#%E9%A3%9E%E6%9C%BA%E9%85%92%E5%BA%97%EF%BC%9A%E6%90%BA%E7%A8%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>飞机酒店：携程</h4>\n<p>作为一个出行必备的app，携程算是满足了我的需求。我会把我喜欢的酒店都存储在携程的收藏中，作为猎奇心理，大大小小的酒店我都有尝试，就看未来哪一天我还写文章将这些酒店慢慢诉说吧。</p>\n<h4 id=\"航班：航旅纵横pro\"><a href=\"#%E8%88%AA%E7%8F%AD%EF%BC%9A%E8%88%AA%E6%97%85%E7%BA%B5%E6%A8%AApro\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>航班：航旅纵横Pro</h4>\n<p>这个app可以查看你购买的航班的信息，包括但不限于机场名称、航站楼号、值机柜台、登机口、航班起飞时间、航班到达时间、是否有餐食、当前航班状态，前序航班状态。所有的这些信息都能够在一个app中给你提供了，相比自己寻找信息能够节省大量的时间，尤其是飞机出行把握时间很重要。</p>\n<h4 id=\"打车：滴滴\"><a href=\"#%E6%89%93%E8%BD%A6%EF%BC%9A%E6%BB%B4%E6%BB%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>打车：滴滴</h4>\n<p>作为最后的佼佼者，我只能说是没得选择的选择了。希望不要作恶吧。也期望着现在新的出行服务提供商的发展。</p>\n<h4 id=\"地图：高德地图\"><a href=\"#%E5%9C%B0%E5%9B%BE%EF%BC%9A%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>地图：高德地图</h4>\n<p>由于害怕全家桶，故选择了高德。希望高德能将地铁图的入口往外层调整一下，我真的不相信这个需求会没有什么人用，4年了，这个入口不断被放在更深的地方，真的气死人。</p>\n<h4 id=\"公交：车来了\"><a href=\"#%E5%85%AC%E4%BA%A4%EF%BC%9A%E8%BD%A6%E6%9D%A5%E4%BA%86\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>公交：车来了</h4>\n<p>刚发展的时候还是蛮好用的，但是最近广告多得有点过分了。正在考虑替代方案中。</p>\n<h4 id=\"高铁：高铁管家pro\"><a href=\"#%E9%AB%98%E9%93%81%EF%BC%9A%E9%AB%98%E9%93%81%E7%AE%A1%E5%AE%B6pro\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>高铁：高铁管家Pro</h4>\n<p>首先，官方12306的排队功能还没有上线，我还是需要这么一款软件帮我云端“排排队”。其次，只要我付费了软件就没有广告，何乐而不为。至于抢不抢得到嘛，心里有点数就行了。</p>\n<h3 id=\"效率\"><a href=\"#%E6%95%88%E7%8E%87\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>效率</h3>\n<h4 id=\"快捷方式：shortcuts\"><a href=\"#%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%9Ashortcuts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>快捷方式：Shortcuts</h4>\n<p>通过整合一系列的动作到一个按钮，一次性触发，颇有编程的思想。举个栗子，我最常用的两个shortcuts分别是“取快递提醒”和“12306出行事件”，一般快递到达快递箱之后会有一条短信提醒，我只需要复制这条短信，然后触发这个shortcut，再配合iphone的位置服务，当我走到快递箱附近时就会有通知告诉我取件码，这体验真的挺棒的。12306出行事件也是类似的。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image482.jpg\" alt=\"shortcus\"></p>\n<h4 id=\"日程widget：agenda\"><a href=\"#%E6%97%A5%E7%A8%8Bwidget%EF%BC%9Aagenda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>日程Widget：Agenda+</h4>\n<p>Agenda+ app能够读取你的日历事件，然后生成agenda。系统日历app的widget只能显示今天的事件，但是我想要的明明是提前就要告诉我“女朋友生日啦”，否则你怎么准备啊，不用跪搓衣板吗。💄 🙏</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image483.jpg\" alt=\"agenda\"></p>\n<h4 id=\"todo-widget：reminder\"><a href=\"#todo-widget%EF%BC%9Areminder\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Todo Widget：Reminder+</h4>\n<p>Todo List的作用就是先收纳，然后赶紧做，但你其实并不知道应该什么时候开始做，如果有item需要remind，那岂不成了event了？所以我自己的需求更需要一个Todo List能够显示再widget中的，会在不小心翻到的时候瞄一眼，提醒自己还有很多没干的，没有浪费时间在视频上。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image484.jpg\" alt=\"reminder\"></p>\n<h4 id=\"分词：pin\"><a href=\"#%E5%88%86%E8%AF%8D%EF%BC%9Apin\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>分词：Pin</h4>\n<p>最近这个app其实被我使用场景比较低了，但是它却是带我进入iOS效率的第一个软件。感恩有你，因此还保留在手机中。附上官方使用教程，有兴趣的可以了解一下。</p>\n<p><a href=\"https://github.com/cyanzhong/app-tutorials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/cyanzhong/app-tutorials</a></p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image485.jpg\" alt=\"pin\"></p>\n<h2 id=\"web\"><a href=\"#web\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Web</h2>\n<h4 id=\"传输：pushbullet\"><a href=\"#%E4%BC%A0%E8%BE%93%EF%BC%9Apushbullet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>传输：Pushbullet</h4>\n<p>用来跨设备之间传输截图，作为Synergy 的一个补充吧。</p>\n<h4 id=\"工具箱：在线工具开源中国社区\"><a href=\"#%E5%B7%A5%E5%85%B7%E7%AE%B1%EF%BC%9A%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD%E7%A4%BE%E5%8C%BA\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>工具箱：在线工具——开源中国社区</h4>\n<p>实用功能还是蛮多的，有兴趣的慢慢挖掘吧。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image486.jpg\" alt=\"tools\"></p>\n<h4 id=\"流程图：processon\"><a href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE%EF%BC%9Aprocesson\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>流程图：ProcessOn</h4>\n<p>一个蛮知名的在线软件了，可以支持流程图、思维导图、原型图、UML、网络拓扑图、组织结构图，样式也算挺漂亮的。</p>\n<h4 id=\"关系图：sketchboard\"><a href=\"#%E5%85%B3%E7%B3%BB%E5%9B%BE%EF%BC%9Asketchboard\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>关系图：Sketchboard</h4>\n<p>随手截图两张看看效果吧，没有ipad或者surface的时候，这个还是挺好用的</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image487.jpg\" alt=\"sketchboard1\"></p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image488.jpg\" alt=\"sketchboard2\"></p>\n<h4 id=\"markdown：马克飞象\"><a href=\"#markdown%EF%BC%9A%E9%A9%AC%E5%85%8B%E9%A3%9E%E8%B1%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Markdown：马克飞象</h4>\n<p>有时候还是需要网页端使用markdown写写东西的，支持的功能最多的应该要数马克飞象了。如果印象笔记的markdown支持网页端就好了。</p>\n<h4 id=\"数学绘图：desmos\"><a href=\"#%E6%95%B0%E5%AD%A6%E7%BB%98%E5%9B%BE%EF%BC%9Adesmos\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>数学绘图：Desmos</h4>\n<p>对于一些特定的函数，Desmos能够将其绘制在坐标轴上，使其更直观理解，对于平时推导一些公式的时候，真的十分方便。</p>\n<h4 id=\"pdf：smallpdf\"><a href=\"#pdf%EF%BC%9Asmallpdf\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PDF：Smallpdf</h4>\n<p>处理PDF的好工具，基本上和pdf相关的操作它都有了。</p>\n<p><img src=\"https://wsine.cn-gd.ufileos.com/image/wsine-blog-image489.jpg\" alt=\"pdf\"></p>\n<h4 id=\"latex：overleaf\"><a href=\"#latex%EF%BC%9Aoverleaf\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Latex：Overleaf</h4>\n<p>每到顶会截止投稿的那天，基本上服务都会炸了，可想而知使用人数有多少。Latex是一个好东西，但不适合普通人吧。知者请试用。</p>\n<h2 id=\"后记\"><a href=\"#%E5%90%8E%E8%AE%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>后记</h2>\n<p>我相信总会有人问，为什么没有Android和MacOS的软件推荐，笔者并非没有长时间使用过这两款，且也有了比较顺手的工具，只是最近身边的常用工具就这些，不方便截图就先不写了，以后有空再补充。</p>\n<p>如果你有更好的解决方案，欢迎前来探讨探讨吐槽吐槽~</p>\n<p>如果你有强烈的痛点暂时没找到解决方案，欢迎告诉我我来折腾折腾~</p>\n"}}]}}},"context":{}}